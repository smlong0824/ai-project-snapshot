{
  "doc_id": "docs.microsoft.com_en_us_azure_architecture_patterns",
  "chunks": [
    {
      "content": "Ambassador Create helper services that send network requests on behalf of a consumer service or application. - Reliability- Security Anti-Corruption Layer Implement a fa\u00c3\u00a7ade or adapter layer between a modern application and a legacy system. - Operational Excellence Asynchronous Request-Reply Decouple back-end processing from a front-end host. This pattern is useful when back-end processing must be asynchronous, but the front end requires a clear and timely response. - Performance Efficiency Backends for Frontends Create separate backend services for specific frontend applications or interfaces. - Reliability- Security- Performance Efficiency Bulkhead Isolate elements of an application into pools so that if one fails, the",
      "metadata": {
        "source": "https://docs.microsoft.com/en-us/azure/architecture/patterns/",
        "doc_id": "docs.microsoft.com_en_us_azure_architecture_patterns",
        "category": "architecture",
        "chunk_id": "docs.microsoft.com_en_us_azure_architecture_patterns_chunk_0",
        "chunk_index": 0
      }
    },
    {
      "content": "an application into pools so that if one fails, the others continue to function. - Reliability- Security- Performance Efficiency Cache-Aside Load data on demand into a cache from a data store. - Reliability- Performance Efficiency Choreography Let individual services decide when and how a business operation is processed, instead of depending on a central orchestrator. - Operational Excellence- Performance Efficiency Circuit Breaker Handle faults that might take a variable amount of time to fix when an application connects to a remote service or resource. - Reliability- Performance Efficiency Claim Check Split a large message into a claim check and a payload to",
      "metadata": {
        "source": "https://docs.microsoft.com/en-us/azure/architecture/patterns/",
        "doc_id": "docs.microsoft.com_en_us_azure_architecture_patterns",
        "category": "architecture",
        "chunk_id": "docs.microsoft.com_en_us_azure_architecture_patterns_chunk_1",
        "chunk_index": 1
      }
    },
    {
      "content": "large message into a claim check and a payload to avoid overwhelming a message bus. - Reliability- Security- Cost Optimization- Performance Efficiency Compensating Transaction Undo the work performed by a sequence of steps that collectively form an eventually consistent operation. - Reliability Competing Consumers Enable multiple concurrent consumers to process messages that they receive on the same messaging channel. - Reliability- Cost Optimization- Performance Efficiency Compute Resource Consolidation Consolidate multiple tasks or operations into a single computational unit. - Cost Optimization- Operational Excellence- Performance Efficiency CQRS Separate operations that read data from those that update data by using distinct interfaces. - Performance",
      "metadata": {
        "source": "https://docs.microsoft.com/en-us/azure/architecture/patterns/",
        "doc_id": "docs.microsoft.com_en_us_azure_architecture_patterns",
        "category": "architecture",
        "chunk_id": "docs.microsoft.com_en_us_azure_architecture_patterns_chunk_2",
        "chunk_index": 2
      }
    },
    {
      "content": "those that update data by using distinct interfaces. - Performance Efficiency Deployment Stamps Deploy multiple independent copies of application components, including data stores. - Operational Excellence- Performance Efficiency Event Sourcing Use an append-only store to record a full series of events that describe actions taken on data in a domain. - Reliability- Performance Efficiency External Configuration Store Move configuration information out of an application deployment package to a centralized location. - Operational Excellence Federated Identity Delegate authentication to an external identity provider. - Reliability- Security- Performance Efficiency Gateway Aggregation Use a gateway to aggregate multiple individual requests into a single request. -",
      "metadata": {
        "source": "https://docs.microsoft.com/en-us/azure/architecture/patterns/",
        "doc_id": "docs.microsoft.com_en_us_azure_architecture_patterns",
        "category": "architecture",
        "chunk_id": "docs.microsoft.com_en_us_azure_architecture_patterns_chunk_3",
        "chunk_index": 3
      }
    },
    {
      "content": "to aggregate multiple individual requests into a single request. - Reliability- Security- Operational Excellence- Performance Efficiency Gateway Offloading Offload shared or specialized service functionality to a gateway proxy. - Reliability- Security- Cost Optimization- Operational Excellence- Performance Efficiency Gateway Routing Route requests to multiple services by using a single endpoint. - Reliability- Operational Excellence- Performance Efficiency Geode Deploy back-end services across geographically distributed nodes. Each node can handle client requests from any region. - Reliability- Performance Efficiency Health Endpoint Monitoring Implement functional checks in an application that external tools can access through exposed endpoints at regular intervals. - Reliability- Operational Excellence- Performance Efficiency",
      "metadata": {
        "source": "https://docs.microsoft.com/en-us/azure/architecture/patterns/",
        "doc_id": "docs.microsoft.com_en_us_azure_architecture_patterns",
        "category": "architecture",
        "chunk_id": "docs.microsoft.com_en_us_azure_architecture_patterns_chunk_4",
        "chunk_index": 4
      }
    },
    {
      "content": "endpoints at regular intervals. - Reliability- Operational Excellence- Performance Efficiency Index Table Create indexes over the fields in data stores that queries frequently reference. - Reliability- Performance Efficiency Leader Election Coordinate actions in a distributed application by electing one instance as the leader. The leader manages a collection of collaborating task instances. - Reliability Materialized View Generate prepopulated views over the data in one or more data stores when the data is poorly formatted for required query operations. - Performance Efficiency Messaging Bridge Build an intermediary to enable communication between messaging systems that are otherwise incompatible. - Cost Optimization- Operational Excellence Pipes",
      "metadata": {
        "source": "https://docs.microsoft.com/en-us/azure/architecture/patterns/",
        "doc_id": "docs.microsoft.com_en_us_azure_architecture_patterns",
        "category": "architecture",
        "chunk_id": "docs.microsoft.com_en_us_azure_architecture_patterns_chunk_5",
        "chunk_index": 5
      }
    },
    {
      "content": "that are otherwise incompatible. - Cost Optimization- Operational Excellence Pipes and Filters Break down a task that performs complex processing into a series of separate elements that can be reused. - Reliability Priority Queue Prioritize requests sent to services so that requests with a higher priority are processed more quickly. - Reliability- Performance Efficiency Publisher/Subscriber Enable an application to announce events to multiple consumers asynchronously, without coupling senders to receivers. - Reliability- Security- Cost Optimization- Operational Excellence- Performance Efficiency Quarantine Ensure that external assets meet a team-agreed quality level before the workload consumes them. - Security- Operational Excellence Queue-Based Load Leveling Use",
      "metadata": {
        "source": "https://docs.microsoft.com/en-us/azure/architecture/patterns/",
        "doc_id": "docs.microsoft.com_en_us_azure_architecture_patterns",
        "category": "architecture",
        "chunk_id": "docs.microsoft.com_en_us_azure_architecture_patterns_chunk_6",
        "chunk_index": 6
      }
    },
    {
      "content": "consumes them. - Security- Operational Excellence Queue-Based Load Leveling Use a queue that creates a buffer between a task and a service to smooth intermittent heavy loads. - Reliability- Cost Optimization- Performance Efficiency Rate Limiting Avoid or minimize throttling errors by controlling the consumption of resources. - Reliability Retry Enable applications to handle anticipated temporary failures by retrying failed operations. - Reliability Saga Manage data consistency across microservices in distributed transaction scenarios. - Reliability Scheduler Agent Supervisor Coordinate a set of actions across distributed services and resources. - Reliability- Performance Efficiency Sequential Convoy Process a set of related messages in a defined",
      "metadata": {
        "source": "https://docs.microsoft.com/en-us/azure/architecture/patterns/",
        "doc_id": "docs.microsoft.com_en_us_azure_architecture_patterns",
        "category": "architecture",
        "chunk_id": "docs.microsoft.com_en_us_azure_architecture_patterns_chunk_7",
        "chunk_index": 7
      }
    },
    {
      "content": "Convoy Process a set of related messages in a defined order without blocking other message groups. - Reliability Sharding Divide a data store into a set of horizontal partitions or shards. - Reliability- Cost Optimization Sidecar Deploy components into a separate process or container to provide isolation and encapsulation. - Security- Operational Excellence Static Content Hosting Deploy static content to a cloud-based storage service for direct client delivery. - Cost Optimization Strangler Fig Incrementally migrate a legacy system by gradually replacing pieces of functionality with new applications and services. - Reliability- Cost Optimization- Operational Excellence Throttling Control the consumption of resources from",
      "metadata": {
        "source": "https://docs.microsoft.com/en-us/azure/architecture/patterns/",
        "doc_id": "docs.microsoft.com_en_us_azure_architecture_patterns",
        "category": "architecture",
        "chunk_id": "docs.microsoft.com_en_us_azure_architecture_patterns_chunk_8",
        "chunk_index": 8
      }
    },
    {
      "content": "Optimization- Operational Excellence Throttling Control the consumption of resources from applications, tenants, or services. - Reliability- Security- Cost Optimization- Performance Efficiency Valet Key Use a token or key to provide clients with restricted, direct access to a specific resource or service. - Security- Cost Optimization- Performance Efficiency",
      "metadata": {
        "source": "https://docs.microsoft.com/en-us/azure/architecture/patterns/",
        "doc_id": "docs.microsoft.com_en_us_azure_architecture_patterns",
        "category": "architecture",
        "chunk_id": "docs.microsoft.com_en_us_azure_architecture_patterns_chunk_9",
        "chunk_index": 9
      }
    }
  ]
}