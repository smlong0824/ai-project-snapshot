{
  "doc_id": "nextjs.org_docs_app_building_your_application_routing",
  "chunks": [
    {
      "content": "Layouts and PagesNext.js uses file-system based routing, meaning you can use folders and files to define routes. This page will guide you through how to create layouts and pages, and link between them. A page is UI that is rendered on a specific route. To create a page, add a page file inside the app directory and default export a React component. For example, to create an index page (/): export default function Page() { return <h1>Hello Next.js!</h1> } A layout is UI that is shared between multiple pages. On navigation, layouts preserve state, remain interactive, and do not rerender. You can",
      "metadata": {
        "source": "https://nextjs.org/docs/app/building-your-application/routing",
        "doc_id": "nextjs.org_docs_app_building_your_application_routing",
        "category": "web_development",
        "chunk_id": "nextjs.org_docs_app_building_your_application_routing_chunk_0",
        "chunk_index": 0
      }
    },
    {
      "content": "preserve state, remain interactive, and do not rerender. You can define a layout by default exporting a React component from a layout file. The component should accept a children prop which can be a page or another layout. For example, to create a layout that accepts your index page as child, add a layout file inside the app directory: export default function DashboardLayout({ children, }: { children: React.ReactNode }) { return ( <html lang=\"en\"> <body> {/* Layout UI */} {/* Place children where you want to render a page or nested layout */} <main>{children}</main> </body> </html> ) } The layout above is",
      "metadata": {
        "source": "https://nextjs.org/docs/app/building-your-application/routing",
        "doc_id": "nextjs.org_docs_app_building_your_application_routing",
        "category": "web_development",
        "chunk_id": "nextjs.org_docs_app_building_your_application_routing_chunk_1",
        "chunk_index": 1
      }
    },
    {
      "content": "*/} <main>{children}</main> </body> </html> ) } The layout above is called a root layout because it's defined at the root of the app directory. The root layout is required and must contain html and body tags. A nested route is a route composed of multiple URL segments. For example, the /blog/[slug] route is composed of three segments: / (Root Segment) blog (Segment) [slug] (Leaf Segment) In Next.js: Folders are used to define the route segments that map to URL segments. Files (like page and layout) are used to create UI that is shown for a segment. To create nested routes, you can",
      "metadata": {
        "source": "https://nextjs.org/docs/app/building-your-application/routing",
        "doc_id": "nextjs.org_docs_app_building_your_application_routing",
        "category": "web_development",
        "chunk_id": "nextjs.org_docs_app_building_your_application_routing_chunk_2",
        "chunk_index": 2
      }
    },
    {
      "content": "shown for a segment. To create nested routes, you can nest folders inside each other. For example, to add a route for /blog, create a folder called blog in the app directory. Then, to make /blog publicly accessible, add a page.tsx file: // Dummy imports import { getPosts } from '@/lib/posts' import { Post } from '@/ui/post' export default async function Page() { const posts = await getPosts() return ( <ul> {posts.map((post) => ( <Post key={post.id} post={post} /> ))} </ul> ) } You can continue nesting folders to create nested routes. For example, to create a route for a specific blog post,",
      "metadata": {
        "source": "https://nextjs.org/docs/app/building-your-application/routing",
        "doc_id": "nextjs.org_docs_app_building_your_application_routing",
        "category": "web_development",
        "chunk_id": "nextjs.org_docs_app_building_your_application_routing_chunk_3",
        "chunk_index": 3
      }
    },
    {
      "content": "example, to create a route for a specific blog post, create a new [slug] folder inside blog and add a page file: function generateStaticParams() {} export default function Page() { return <h1>Hello, Blog Post Page!</h1> } Wrapping a folder name in square brackets (e.g. [slug]) creates a dynamic route segment which is used to generate multiple pages from data. e.g. blog posts, product pages, etc. By default, layouts in the folder hierarchy are also nested, which means they wrap child layouts via their children prop. You can nest layouts by adding layout inside specific route segments (folders). For example, to create a",
      "metadata": {
        "source": "https://nextjs.org/docs/app/building-your-application/routing",
        "doc_id": "nextjs.org_docs_app_building_your_application_routing",
        "category": "web_development",
        "chunk_id": "nextjs.org_docs_app_building_your_application_routing_chunk_4",
        "chunk_index": 4
      }
    },
    {
      "content": "inside specific route segments (folders). For example, to create a layout for the /blog route, add a new layout file inside the blog folder. export default function BlogLayout({ children, }: { children: React.ReactNode }) { return <section>{children}</section> } If you were to combine the two layouts above, the root layout (app/layout.js) would wrap the blog layout (app/blog/layout.js), which would wrap the blog (app/blog/page.js) and blog post page (app/blog/[slug]/page.js). Dynamic segments allow you to create routes that are generated from data. For example, instead of manually creating a route for each individual blog post, you can create a dynamic segment to generate the",
      "metadata": {
        "source": "https://nextjs.org/docs/app/building-your-application/routing",
        "doc_id": "nextjs.org_docs_app_building_your_application_routing",
        "category": "web_development",
        "chunk_id": "nextjs.org_docs_app_building_your_application_routing_chunk_5",
        "chunk_index": 5
      }
    },
    {
      "content": "post, you can create a dynamic segment to generate the routes based on blog post data. To create a dynamic segment, wrap the segment (folder) name in square brackets: [segmentName]. For example, in the app/blog/[slug]/page.tsx route, the [slug] is the dynamic segment. export default async function BlogPostPage({ params, }: { params: Promise<{ slug: string }> }) { const { slug } = await params const post = await getPost(slug) return ( <div> <h1>{post.title}</h1> <p>{post.content}</p> </div> ) } Learn more about Dynamic Segments and the params props. Nested layouts within Dynamic Segments, can also access the params props. In a Server Component page,",
      "metadata": {
        "source": "https://nextjs.org/docs/app/building-your-application/routing",
        "doc_id": "nextjs.org_docs_app_building_your_application_routing",
        "category": "web_development",
        "chunk_id": "nextjs.org_docs_app_building_your_application_routing_chunk_6",
        "chunk_index": 6
      }
    },
    {
      "content": "also access the params props. In a Server Component page, you can access search parameters using the searchParams prop: export default async function Page({ searchParams, }: { searchParams: Promise<{ [key: string]: string | string[] | undefined }> }) { const filters = (await searchParams).filters } Using searchParams opts your page into dynamic rendering because it requires a incoming request to read the search parameters from. Client Components can read search params using the useSearchParams hook. Learn more about useSearchParams in statically rendered and dynamically rendered routes. Use the searchParams prop when you need search parameters to load data for the page (e.g.",
      "metadata": {
        "source": "https://nextjs.org/docs/app/building-your-application/routing",
        "doc_id": "nextjs.org_docs_app_building_your_application_routing",
        "category": "web_development",
        "chunk_id": "nextjs.org_docs_app_building_your_application_routing_chunk_7",
        "chunk_index": 7
      }
    },
    {
      "content": "need search parameters to load data for the page (e.g. pagination, filtering from a database). Use useSearchParams when search parameters are used only on the client (e.g. filtering a list already loaded via props). As a small optimization, you can use new URLSearchParams(window.location.search) in callbacks or event handlers to read search params without triggering re-renders. You can use the <Link> component to navigate between routes. <Link> is a built-in Next.js component that extends the HTML <a> tag to provide prefetching and client-side navigation. For example, to generate a list of blog posts, import <Link> from next/link and pass a href prop to",
      "metadata": {
        "source": "https://nextjs.org/docs/app/building-your-application/routing",
        "doc_id": "nextjs.org_docs_app_building_your_application_routing",
        "category": "web_development",
        "chunk_id": "nextjs.org_docs_app_building_your_application_routing_chunk_8",
        "chunk_index": 8
      }
    },
    {
      "content": "import <Link> from next/link and pass a href prop to the component: import Link from 'next/link' export default async function Post({ post }) { const posts = await getPosts() return ( <ul> {posts.map((post) => ( <li key={post.slug}> <Link href={`/blog/${post.slug}`}>{post.title}</Link> </li> ))} </ul> ) } Good to know: <Link> is the primary way to navigate between routes in Next.js. You can also use the useRouter hook for more advanced navigation. Next.js exposes utility types that infer params and named slots from your route structure: PageProps: Props for page components, including params and searchParams. LayoutProps: Props for layout components, including children and any named",
      "metadata": {
        "source": "https://nextjs.org/docs/app/building-your-application/routing",
        "doc_id": "nextjs.org_docs_app_building_your_application_routing",
        "category": "web_development",
        "chunk_id": "nextjs.org_docs_app_building_your_application_routing_chunk_9",
        "chunk_index": 9
      }
    },
    {
      "content": "LayoutProps: Props for layout components, including children and any named slots (e.g. folders like @analytics). These are globally available helpers, generated when running either next dev, next build or next typegen. export default async function Page(props: PageProps<'/blog/[slug]'>) { const { slug } = await props.params return <h1>Blog post: {slug}</h1> } export default function Layout(props: LayoutProps<'/dashboard'>) { return ( <section> {props.children} {/* If you have app/dashboard/@analytics, it appears as a typed slot: */} {/* {props.analytics} */} </section> ) } Good to know Static routes resolve params to {}. PageProps, LayoutProps are global helpers \u2014 no imports required. Types are generated during next dev,",
      "metadata": {
        "source": "https://nextjs.org/docs/app/building-your-application/routing",
        "doc_id": "nextjs.org_docs_app_building_your_application_routing",
        "category": "web_development",
        "chunk_id": "nextjs.org_docs_app_building_your_application_routing_chunk_10",
        "chunk_index": 10
      }
    },
    {
      "content": "\u2014 no imports required. Types are generated during next dev, next build or next typegen.",
      "metadata": {
        "source": "https://nextjs.org/docs/app/building-your-application/routing",
        "doc_id": "nextjs.org_docs_app_building_your_application_routing",
        "category": "web_development",
        "chunk_id": "nextjs.org_docs_app_building_your_application_routing_chunk_11",
        "chunk_index": 11
      }
    }
  ]
}