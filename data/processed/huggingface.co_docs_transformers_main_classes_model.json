{
  "doc_id": "huggingface.co_docs_transformers_main_classes_model",
  "chunks": [
    {
      "content": "class transformers.PreTrainedModel < source > ( config: PretrainedConfig *inputs **kwargs ) Base class for all models. PreTrainedModel takes care of storing the configuration of the models and handles methods for loading, downloading and saving models as well as a few methods common to all models to: resize the input embeddings, prune heads in the self-attention heads. Class attributes (overridden by derived classes): config_class (PretrainedConfig) \u2014 A subclass of PretrainedConfig to use as configuration class for this model architecture. load_tf_weights (Callable) \u2014 A python method for loading a TensorFlow checkpoint in a PyTorch model, taking as arguments: model (PreTrainedModel) \u2014 An instance of",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_0",
        "chunk_index": 0
      }
    },
    {
      "content": "model, taking as arguments: model (PreTrainedModel) \u2014 An instance of the model on which to load the TensorFlow checkpoint. config (PreTrainedConfig) \u2014 An instance of the configuration associated to the model. path (str) \u2014 A path to the TensorFlow checkpoint. base_model_prefix (str) \u2014 A string indicating the attribute associated to the base model in derived classes of the same architecture adding modules on top of the base model. is_parallelizable (bool) \u2014 A flag indicating whether this model supports model parallelization. main_input_name (str) \u2014 The name of the principal input to the model (often input_ids for NLP models, pixel_values for vision models and",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_1",
        "chunk_index": 1
      }
    },
    {
      "content": "(often input_ids for NLP models, pixel_values for vision models and input_values for speech models). can_record_outputs (dict): push_to_hub < source > ( repo_id: str use_temp_dir: typing.Optional[bool] = None commit_message: typing.Optional[str] = None private: typing.Optional[bool] = None token: typing.Union[bool, str, NoneType] = None max_shard_size: typing.Union[str, int, NoneType] = '5GB' create_pr: bool = False safe_serialization: bool = True revision: typing.Optional[str] = None commit_description: typing.Optional[str] = None tags: typing.Optional[list[str]] = None **deprecated_kwargs ) Parameters repo_id (str) \u2014 The name of the repository you want to push your model to. It should contain your organization name when pushing to a given organization. use_temp_dir (bool, optional) \u2014 Whether",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_2",
        "chunk_index": 2
      }
    },
    {
      "content": "pushing to a given organization. use_temp_dir (bool, optional) \u2014 Whether or not to use a temporary directory to store the files saved before they are pushed to the Hub. Will default to True if there is no directory named like repo_id, False otherwise. commit_message (str, optional) \u2014 Message to commit while pushing. Will default to \"Upload model\". private (bool, optional) \u2014 Whether to make the repo private. If None (default), the repo will be public unless the organization\u2019s default is private. This value is ignored if the repo already exists. token (bool or str, optional) \u2014 The token to use as HTTP",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_3",
        "chunk_index": 3
      }
    },
    {
      "content": "or str, optional) \u2014 The token to use as HTTP bearer authorization for remote files. If True, will use the token generated when running hf auth login (stored in ~/.huggingface). Will default to True if repo_url is not specified. max_shard_size (int or str, optional, defaults to \"5GB\") \u2014 Only applicable for models. The maximum size for a checkpoint before being sharded. Checkpoints shard will then be each of size lower than this size. If expressed as a string, needs to be digits followed by a unit (like \"5MB\"). We default it to \"5GB\" so that users can easily load models on free-tier",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_4",
        "chunk_index": 4
      }
    },
    {
      "content": "\"5GB\" so that users can easily load models on free-tier Google Colab instances without any CPU OOM issues. create_pr (bool, optional, defaults to False) \u2014 Whether or not to create a PR with the uploaded files or directly commit. safe_serialization (bool, optional, defaults to True) \u2014 Whether or not to convert the model weights in safetensors format for safer serialization. revision (str, optional) \u2014 Branch to push the uploaded files to. commit_description (str, optional) \u2014 The description of the commit that will be created tags (list[str], optional) \u2014 List of tags to push on the Hub. Upload the model file to the",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_5",
        "chunk_index": 5
      }
    },
    {
      "content": "push on the Hub. Upload the model file to the \ud83e\udd17 Model Hub. Examples: from transformers import AutoModel model = AutoModel.from_pretrained(\"google-bert/bert-base-cased\") model.push_to_hub(\"my-finetuned-bert\") model.push_to_hub(\"huggingface/my-finetuned-bert\") add_model_tags < source > ( tags: typing.Union[list[str], str] ) Parameters tags (Union[list[str], str]) \u2014 The desired tags to inject in the model Add custom tags into the model that gets pushed to the Hugging Face Hub. Will not overwrite existing tags in the model. Examples: from transformers import AutoModel model = AutoModel.from_pretrained(\"google-bert/bert-base-cased\") model.add_model_tags([\"custom\", \"custom-bert\"]) model.push_to_hub(\"my-custom-bert\") can_generate < source > ( ) \u2192 bool Whether this model can generate sequences with .generate(). Returns whether this model can generate sequences with",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_6",
        "chunk_index": 6
      }
    },
    {
      "content": "with .generate(). Returns whether this model can generate sequences with .generate() from the GenerationMixin. Under the hood, on classes where this function returns True, some generation-specific changes are triggered: for instance, the model instance will have a populated generation_config attribute. Potentially dequantize the model in case it has been quantized by a quantization method that support dequantization. Removes the _require_grads_hook. Enables the gradients for the input embeddings. This is useful for fine-tuning adapter weights while keeping the model weights fixed. from_pretrained < source > ( pretrained_model_name_or_path: typing.Union[str, os.PathLike, NoneType] *model_args config: typing.Union[transformers.configuration_utils.PretrainedConfig, str, os.PathLike, NoneType] = None cache_dir: typing.Union[str, os.PathLike, NoneType] =",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_7",
        "chunk_index": 7
      }
    },
    {
      "content": "str, os.PathLike, NoneType] = None cache_dir: typing.Union[str, os.PathLike, NoneType] = None ignore_mismatched_sizes: bool = False force_download: bool = False local_files_only: bool = False token: typing.Union[str, bool, NoneType] = None revision: str = 'main' use_safetensors: typing.Optional[bool] = None weights_only: bool = True **kwargs ) Parameters pretrained_model_name_or_path (str or os.PathLike, optional) \u2014 Can be either: A string, the model id of a pretrained model hosted inside a model repo on huggingface.co. A path to a directory containing model weights saved using save_pretrained(), e.g., ./my_model_directory/. A path or url to a tensorflow index checkpoint file (e.g, ./tf_model/model.ckpt.index). In this case, from_tf should be set to",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_8",
        "chunk_index": 8
      }
    },
    {
      "content": "(e.g, ./tf_model/model.ckpt.index). In this case, from_tf should be set to True and a configuration object should be provided as config argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards. A path or url to a model folder containing a flax checkpoint file in .msgpack format (e.g, ./flax_model/ containing flax_model.msgpack). In this case, from_flax should be set to True. None if you are both providing the configuration and state dictionary (resp. with keyword arguments config and state_dict). model_args (sequence of positional arguments, optional) \u2014 All remaining",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_9",
        "chunk_index": 9
      }
    },
    {
      "content": "state_dict). model_args (sequence of positional arguments, optional) \u2014 All remaining positional arguments will be passed to the underlying model\u2019s __init__ method. config (Union[PretrainedConfig, str, os.PathLike], optional) \u2014 Can be either: Configuration for the model to use instead of an automatically loaded configuration. Configuration can be automatically loaded when: The model is a model provided by the library (loaded with the model id string of a pretrained model). The model was saved using save_pretrained() and is reloaded by supplying the save directory. The model is loaded by supplying a local directory as pretrained_model_name_or_path and a configuration JSON file named config.json is found in",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_10",
        "chunk_index": 10
      }
    },
    {
      "content": "and a configuration JSON file named config.json is found in the directory. state_dict (dict[str, torch.Tensor], optional) \u2014 A state dictionary to use instead of a state dictionary loaded from saved weights file. This option can be used if you want to create a model from a pretrained configuration but load your own weights. In this case though, you should check if using save_pretrained() and from_pretrained() is not a simpler option. cache_dir (Union[str, os.PathLike], optional) \u2014 Path to a directory in which a downloaded pretrained model configuration should be cached if the standard cache should not be used. from_tf (bool, optional, defaults to",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_11",
        "chunk_index": 11
      }
    },
    {
      "content": "cache should not be used. from_tf (bool, optional, defaults to False) \u2014 Load the model weights from a TensorFlow checkpoint save file (see docstring of pretrained_model_name_or_path argument). from_flax (bool, optional, defaults to False) \u2014 Load the model weights from a Flax checkpoint save file (see docstring of pretrained_model_name_or_path argument). ignore_mismatched_sizes (bool, optional, defaults to False) \u2014 Whether or not to raise an error if some of the weights from the checkpoint do not have the same size as the weights of the model (if for instance, you are instantiating a model with 10 labels from a checkpoint with 3 labels). force_download (bool,",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_12",
        "chunk_index": 12
      }
    },
    {
      "content": "10 labels from a checkpoint with 3 labels). force_download (bool, optional, defaults to False) \u2014 Whether or not to force the (re-)download of the model weights and configuration files, overriding the cached versions if they exist. proxies (dict[str, str], optional) \u2014 A dictionary of proxy servers to use by protocol or endpoint, e.g., {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}. The proxies are used on each request. output_loading_info(bool, optional, defaults to False) \u2014 Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages. local_files_only(bool, optional, defaults to False) \u2014 Whether or not to only look at local files (i.e.,",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_13",
        "chunk_index": 13
      }
    },
    {
      "content": "Whether or not to only look at local files (i.e., do not try to download the model). token (str or bool, optional) \u2014 The token to use as HTTP bearer authorization for remote files. If True, or not specified, will use the token generated when running hf auth login (stored in ~/.huggingface). revision (str, optional, defaults to \"main\") \u2014 The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a git-based system for storing models and other artifacts on huggingface.co, so revision can be any identifier allowed by git. To",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_14",
        "chunk_index": 14
      }
    },
    {
      "content": "so revision can be any identifier allowed by git. To test a pull request you made on the Hub, you can pass revision=\"refs/pr/<pr_number>\". attn_implementation (str, optional) \u2014 The attention implementation to use in the model (if relevant). Can be any of \"eager\" (manual implementation of the attention), \"sdpa\" (using F.scaled_dot_product_attention), \"flash_attention_2\" (using Dao-AILab/flash-attention), or \"flash_attention_3\" (using Dao-AILab/flash-attention/hopper). By default, if available, SDPA will be used for torch>=2.1.1. The default is otherwise the manual \"eager\" implementation. Accept HF kernel references in the form: /[@][:] and are any non-\"/\" and non-\":\" sequences. \u201c@\u201d is optional (branch, tag, or commit-ish), e.g. \u201c@main\u201d, \u201c@v1.2.0\u201d, \u201c@abc123\u201d. \u201d:\u201d",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_15",
        "chunk_index": 15
      }
    },
    {
      "content": "optional (branch, tag, or commit-ish), e.g. \u201c@main\u201d, \u201c@v1.2.0\u201d, \u201c@abc123\u201d. \u201d:\u201d is optional and selects a function inside the kernel repo. Both options can appear together and in this order only: @revision first, then :kernel_name. We intentionally allow a leading \u201d|\u201d prefix (e.g., \u201cflash|\u2026\u201d) because the code strips it before loading; \u2019|\u2019 is not excluded in the character classes here. Examples that match: \u201corg/model\u201d \u201corg/model@main\u201d \u201corg/model:custom_kernel\u201d \u201corg/model@v1.2.3:custom_kernel\u201d Parameters for big model inference dtype (str or torch.dtype, optional) \u2014 Override the default torch_dtype and load the model under a specific dtype. The different options are: torch.float16 or torch.bfloat16 or torch.float: load in a specified",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_16",
        "chunk_index": 16
      }
    },
    {
      "content": "are: torch.float16 or torch.bfloat16 or torch.float: load in a specified dtype, ignoring the model\u2019s config.dtype if one exists. If not specified the model will get loaded in torch.float (fp32). \"auto\" - A dtype or torch_dtype entry in the config.json file of the model will be attempted to be used. If this entry isn\u2019t found then next check the dtype of the first weight in the checkpoint that\u2019s of a floating point type and use that as dtype. This will load the model using the dtype it was saved in at the end of the training. It can\u2019t be used as an indicator",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_17",
        "chunk_index": 17
      }
    },
    {
      "content": "of the training. It can\u2019t be used as an indicator of how the model was trained. Since it could be trained in one of half precision dtypes, but saved in fp32. A string that is a valid torch.dtype. E.g. \u201cfloat32\u201d loads the model in torch.float32, \u201cfloat16\u201d loads in torch.float16 etc. For some models the dtype they were trained in is unknown - you may try to check the model\u2019s paper or reach out to the authors and ask them to add this information to the model\u2019s card and to insert the dtype or torch_dtype entry in config.json on the hub. device_map (str",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_18",
        "chunk_index": 18
      }
    },
    {
      "content": "or torch_dtype entry in config.json on the hub. device_map (str or dict[str, Union[int, str, torch.device]] or int or torch.device, optional) \u2014 A map that specifies where each submodule should go. It doesn\u2019t need to be refined to each parameter/buffer name, once a given module name is inside, every submodule of it will be sent to the same device. If we only pass the device (e.g., \"cpu\", \"cuda:1\", \"mps\", or a GPU ordinal rank like 1) on which the model will be allocated, the device map will map the entire model to this device. Passing device_map = 0 means put the whole model",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_19",
        "chunk_index": 19
      }
    },
    {
      "content": "device. Passing device_map = 0 means put the whole model on GPU 0. To have Accelerate compute the most optimized device_map automatically, set device_map=\"auto\". For more information about each option see designing a device map. max_memory (Dict, optional) \u2014 A dictionary device identifier to maximum memory if using device_map. Will default to the maximum memory available for each GPU and the available CPU RAM if unset. tp_plan (str, optional) \u2014 A torch tensor parallel plan, see here. Currently, it only accepts tp_plan=\"auto\" to use predefined plan based on the model. Note that if you use it, you should launch your script accordingly",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_20",
        "chunk_index": 20
      }
    },
    {
      "content": "if you use it, you should launch your script accordingly with torchrun [args] script.py. This will be much faster than using a device_map, but has limitations. tp_size (str, optional) \u2014 A torch tensor parallel degree. If not provided would default to world size. device_mesh (torch.distributed.DeviceMesh, optional) \u2014 A torch device mesh. If not provided would default to world size. Used only for tensor parallel for now. If provided, it has to contain dimension named \"tp\" in case it\u2019s > 1 dimensional, this dimension will be used for tensor parallelism offload_folder (str or os.PathLike, optional) \u2014 If the device_map contains any value \"disk\",",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_21",
        "chunk_index": 21
      }
    },
    {
      "content": "os.PathLike, optional) \u2014 If the device_map contains any value \"disk\", the folder where we will offload weights. offload_buffers (bool, optional) \u2014 Whether or not to offload the buffers with the model parameters. quantization_config (Union[QuantizationConfigMixin,Dict], optional) \u2014 A dictionary of configuration parameters or a QuantizationConfigMixin object for quantization (e.g bitsandbytes, gptq). There may be other quantization-related kwargs, including load_in_4bit and load_in_8bit, which are parsed by QuantizationConfigParser. Supported only for bitsandbytes quantizations and not preferred. consider inserting all such arguments into quantization_config instead. subfolder (str, optional, defaults to \"\") \u2014 In case the relevant files are located inside a subfolder of the model repo",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_22",
        "chunk_index": 22
      }
    },
    {
      "content": "files are located inside a subfolder of the model repo on huggingface.co, you can specify the folder name here. variant (str, optional) \u2014 If specified load weights from variant filename, e.g. pytorch_model..bin. variant is ignored when using from_tf or from_flax. use_safetensors (bool, optional, defaults to None) \u2014 Whether or not to use safetensors checkpoints. Defaults to None. If not specified and safetensors is not installed, it will be set to False. weights_only (bool, optional, defaults to True) \u2014 Indicates whether unpickler should be restricted to loading only tensors, primitive types, dictionaries and any types added via torch.serialization.add_safe_globals(). When set to False, we",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_23",
        "chunk_index": 23
      }
    },
    {
      "content": "any types added via torch.serialization.add_safe_globals(). When set to False, we can load wrapper tensor subclass weights. key_mapping (`dict[str, str], optional) \u2014 A potential mapping of the weight names if using a model on the Hub which is compatible to a Transformers architecture, but was not converted accordingly. kwargs (remaining dictionary of keyword arguments, optional) \u2014 Can be used to update the configuration object (after it being loaded) and initiate the model (e.g., output_attentions=True). Behaves differently depending on whether a config is provided or automatically loaded: If a configuration is provided with config, **kwargs will be directly passed to the underlying model\u2019s __init__",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_24",
        "chunk_index": 24
      }
    },
    {
      "content": "**kwargs will be directly passed to the underlying model\u2019s __init__ method (we assume all relevant updates to the configuration have already been done) If a configuration is not provided, kwargs will be first passed to the configuration class initialization function (from_pretrained()). Each key of kwargs that corresponds to a configuration attribute will be used to override said attribute with the supplied kwargs value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model\u2019s __init__ function. Instantiate a pretrained pytorch model from a pre-trained model configuration. The model is set in evaluation mode by default using",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_25",
        "chunk_index": 25
      }
    },
    {
      "content": "The model is set in evaluation mode by default using model.eval() (Dropout modules are deactivated). To train the model, you should first set it back in training mode with model.train(). The warning Weights from XXX not initialized from pretrained model means that the weights of XXX do not come pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning task. The warning Weights from XXX not used in YYY means that the layer XXX is not used by YYY, therefore those weights are discarded. Activate the special \u201coffline-mode\u201d to use this method",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_26",
        "chunk_index": 26
      }
    },
    {
      "content": "are discarded. Activate the special \u201coffline-mode\u201d to use this method in a firewalled environment. Examples: >>> from transformers import BertConfig, BertModel >>> >>> model = BertModel.from_pretrained(\"google-bert/bert-base-uncased\") >>> >>> model = BertModel.from_pretrained(\"./test/saved_model/\") >>> >>> model = BertModel.from_pretrained(\"google-bert/bert-base-uncased\", output_attentions=True) >>> assert model.config.output_attentions == True >>> >>> config = BertConfig.from_json_file(\"./tf_model/my_tf_model_config.json\") >>> model = BertModel.from_pretrained(\"./tf_model/my_tf_checkpoint.ckpt.index\", from_tf=True, config=config) >>> >>> model = BertModel.from_pretrained(\"google-bert/bert-base-uncased\", from_flax=True) get_compiled_call < source > ( compile_config: typing.Optional[transformers.generation.configuration_utils.CompileConfig] ) Return a torch.compile\u2018d version of self.__call__. This is useful to dynamically choose between non-compiled/compiled forward during inference, especially to switch between prefill (where we don\u2019t want to use compiled version to avoid recomputing the graph",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_27",
        "chunk_index": 27
      }
    },
    {
      "content": "want to use compiled version to avoid recomputing the graph with new shapes) and iterative decoding (where we want the speed-ups of compiled version with static shapes). Best-effort lookup of the decoder module. Order of attempts (covers ~85 % of current usages): self.decoder self.model (many wrappers store the decoder here) self.model.get_decoder() (nested wrappers) fallback: raise for the few exotic models that need a bespoke rule ( return_buffers = True ) Parameters return_buffers (bool, optional, defaults to True) \u2014 Whether to return the size of the buffer tensors in the computation of the memory footprint. Buffers are tensors that do not require gradients",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_28",
        "chunk_index": 28
      }
    },
    {
      "content": "memory footprint. Buffers are tensors that do not require gradients and not registered as parameters. E.g. mean and std in batch norm layers. Please see: https://discuss.pytorch.org/t/what-pytorch-means-by-buffers/120266/2 Get the memory footprint of a model. This will return the memory footprint of the current model in bytes. Useful to benchmark the memory footprint of the current model and design some tests. Solution inspired from the PyTorch discussions: https://discuss.pytorch.org/t/gpu-memory-that-model-uses/56822/2 get_parameter_or_buffer < source > ( target: str ) Return the parameter or buffer given by target if it exists, otherwise throw an error. This combines get_parameter() and get_buffer() in a single handy function. If the target",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_29",
        "chunk_index": 29
      }
    },
    {
      "content": "and get_buffer() in a single handy function. If the target is an _extra_state attribute, it will return the extra state provided by the module. Note that it only work if target is a leaf of the model. Deactivates gradient checkpointing for the current model. Note that in other frameworks this feature can be referred to as \u201cactivation checkpointing\u201d or \u201ccheckpoint activations\u201d. gradient_checkpointing_enable < source > ( gradient_checkpointing_kwargs = None ) Parameters gradient_checkpointing_kwargs (dict, optional) \u2014 Additional keyword arguments passed along to the torch.utils.checkpoint.checkpoint function. Activates gradient checkpointing for the current model. Note that in other frameworks this feature can be referred to",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_30",
        "chunk_index": 30
      }
    },
    {
      "content": "that in other frameworks this feature can be referred to as \u201cactivation checkpointing\u201d or \u201ccheckpoint activations\u201d. We pass the __call__ method of the modules instead of forward because __call__ attaches all the hooks of the module. https://discuss.pytorch.org/t/any-different-between-model-input-and-model-forward-input/3690/2 If needed prunes and maybe initializes weights. If using a custom PreTrainedModel, you need to implement any initialization logic in _init_weights. This is equivalent to calling self.apply(self._initialize_weights), but correctly handles composite models. This function dynamically dispatches the correct init_weights function to the modules as we advance in the module graph along the recursion. It can handle an arbitrary number of sub-models. Without it, every composite",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_31",
        "chunk_index": 31
      }
    },
    {
      "content": "handle an arbitrary number of sub-models. Without it, every composite model would have to recurse a second time on all sub-models explicitly in the outer-most _init_weights, which is extremely error prone and inefficient. Note that the torch.no_grad() decorator is very important as well, as most of our _init_weights do not use torch.nn.init functions (which are all nograd by default), but simply do in-place ops such as `module.weight.data.zero()`. A method executed at the end of each Transformer model initialization, to execute code that needs the model\u2019s modules properly initialized (such as weight initialization). This is also used when the user is running distributed",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_32",
        "chunk_index": 32
      }
    },
    {
      "content": "This is also used when the user is running distributed code. We add hooks to the modules here, according to the model\u2019s tp_plan! prune_heads < source > ( heads_to_prune: dict ) Parameters heads_to_prune (dict[int, list[int]]) \u2014 Dictionary with keys being selected layer indices (int) and associated values being the list of heads to prune in said layer (list of int). For instance {1: [0, 2], 2: [2, 3]} will prune heads 0 and 2 on layer 1 and heads 2 and 3 on layer 2. Prunes heads of the base model. register_for_auto_class < source > ( auto_class = 'AutoModel' ) Parameters auto_class",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_33",
        "chunk_index": 33
      }
    },
    {
      "content": "< source > ( auto_class = 'AutoModel' ) Parameters auto_class (str or type, optional, defaults to \"AutoModel\") \u2014 The auto class to register this new model with. Register this class with a given auto class. This should only be used for custom models as the ones in the library are already mapped with an auto class. resize_token_embeddings < source > ( new_num_tokens: typing.Optional[int] = None pad_to_multiple_of: typing.Optional[int] = None mean_resizing: bool = True ) \u2192 torch.nn.Embedding Parameters new_num_tokens (int, optional) \u2014 The new number of tokens in the embedding matrix. Increasing the size will add newly initialized vectors at the end. Reducing",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_34",
        "chunk_index": 34
      }
    },
    {
      "content": "size will add newly initialized vectors at the end. Reducing the size will remove vectors from the end. If not provided or None, just returns a pointer to the input tokens torch.nn.Embedding module of the model without doing anything. pad_to_multiple_of (int, optional) \u2014 If set will pad the embedding matrix to a multiple of the provided value.If new_num_tokens is set to None will just pad the embedding to a multiple of pad_to_multiple_of. This is especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute capability >= 7.5 (Volta), or on TPUs which benefit from having sequence lengths be",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_35",
        "chunk_index": 35
      }
    },
    {
      "content": "or on TPUs which benefit from having sequence lengths be a multiple of 128. For more details about this, or help on choosing the correct value for resizing, refer to this guide: https://docs.nvidia.com/deeplearning/performance/dl-performance-matrix-multiplication/index.html#requirements-tc mean_resizing (bool) \u2014 Whether to initialize the added embeddings from a multivariate normal distribution that has old embeddings\u2019 mean and covariance or to initialize them with a normal distribution that has a mean of zero and std equals config.initializer_range. Setting mean_resizing to True is useful when increasing the size of the embeddings of causal language models, where the generated tokens\u2019 probabilities won\u2019t be affected by the added embeddings because",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_36",
        "chunk_index": 36
      }
    },
    {
      "content": "tokens\u2019 probabilities won\u2019t be affected by the added embeddings because initializing the new embeddings with the old embeddings\u2019 mean will reduce the kl-divergence between the next token probability before and after adding the new embeddings. Refer to this article for more information: https://nlp.stanford.edu/~johnhew/vocab-expansion.html Returns torch.nn.Embedding Pointer to the input tokens Embeddings Module of the model. Resizes input token embeddings matrix of the model if new_num_tokens != config.vocab_size. Takes care of tying weights embeddings afterwards if the model class has a tie_weights() method. Reverts the transformation from to_bettertransformer() so that the original modeling is used, for example in order to save the model.",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_37",
        "chunk_index": 37
      }
    },
    {
      "content": "is used, for example in order to save the model. save_pretrained < source > ( save_directory: typing.Union[str, os.PathLike] is_main_process: bool = True state_dict: typing.Optional[dict] = None save_function: typing.Callable = <function save at 0x7f6429f34550> push_to_hub: bool = False max_shard_size: typing.Union[int, str] = '5GB' safe_serialization: bool = True variant: typing.Optional[str] = None token: typing.Union[str, bool, NoneType] = None save_peft_format: bool = True **kwargs ) Parameters save_directory (str or os.PathLike) \u2014 Directory to which to save. Will be created if it doesn\u2019t exist. is_main_process (bool, optional, defaults to True) \u2014 Whether the process calling this is the main process or not. Useful when in distributed",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_38",
        "chunk_index": 38
      }
    },
    {
      "content": "is the main process or not. Useful when in distributed training like TPUs and need to call this function on all processes. In this case, set is_main_process=True only on the main process to avoid race conditions. state_dict (nested dictionary of torch.Tensor) \u2014 The state dictionary of the model to save. Will default to self.state_dict(), but can be used to only save parts of the model or if special precautions need to be taken when recovering the state dictionary of a model (like when using model parallelism). save_function (Callable) \u2014 The function to use to save the state dictionary. Useful on distributed training",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_39",
        "chunk_index": 39
      }
    },
    {
      "content": "use to save the state dictionary. Useful on distributed training like TPUs when one need to replace torch.save by another method. push_to_hub (bool, optional, defaults to False) \u2014 Whether or not to push your model to the Hugging Face model hub after saving it. You can specify the repository you want to push to with repo_id (will default to the name of save_directory in your namespace). max_shard_size (int or str, optional, defaults to \"5GB\") \u2014 The maximum size for a checkpoint before being sharded. Checkpoints shard will then be each of size lower than this size. If expressed as a string, needs",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_40",
        "chunk_index": 40
      }
    },
    {
      "content": "lower than this size. If expressed as a string, needs to be digits followed by a unit (like \"5MB\"). We default it to 5GB in order for models to be able to run easily on free-tier google colab instances without CPU OOM issues. If a single weight of the model is bigger than max_shard_size, it will be in its own checkpoint shard which will be bigger than max_shard_size. safe_serialization (bool, optional, defaults to True) \u2014 Whether to save the model using safetensors or the traditional PyTorch way (that uses pickle). variant (str, optional) \u2014 If specified, weights are saved in the format",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_41",
        "chunk_index": 41
      }
    },
    {
      "content": "optional) \u2014 If specified, weights are saved in the format pytorch_model..bin. token (str or bool, optional) \u2014 The token to use as HTTP bearer authorization for remote files. If True, or not specified, will use the token generated when running hf auth login (stored in ~/.huggingface). save_peft_format (bool, optional, defaults to True) \u2014 For backward compatibility with PEFT library, in case adapter weights are attached to the model, all keys of the state dict of adapters needs to be prepended with base_model.model. Advanced users can disable this behaviours by setting save_peft_format to False. kwargs (dict[str, Any], optional) \u2014 Additional key word arguments",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_42",
        "chunk_index": 42
      }
    },
    {
      "content": "False. kwargs (dict[str, Any], optional) \u2014 Additional key word arguments passed along to the push_to_hub() method. Save a model and its configuration file to a directory, so that it can be re-loaded using the from_pretrained() class method. set_attn_implementation < source > ( attn_implementation: typing.Union[str, dict] ) Parameters attn_implementation (str or dict) \u2014 The attention implementation to set for this model. It can be either a str, in which case it will be dispatched to all submodels if relevant, or a dict where keys are the sub_configs name, in which case each submodel will dispatch the corresponding value. Set the requested attn_implementation for",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_43",
        "chunk_index": 43
      }
    },
    {
      "content": "will dispatch the corresponding value. Set the requested attn_implementation for this model. Symmetric setter. Mirrors the lookup logic used in get_decoder. If set in the config, tie the weights between the input embeddings and the output embeddings, and the encoder and decoder. If the torchscript flag is set in the configuration, can\u2019t handle parameter sharing so we are cloning the weights instead. Recursively (for all submodels) tie all the weights of the model. warn_if_padding_and_no_attention_mask < source > ( input_ids attention_mask ) Shows a one-time warning if the input_ids appear to contain padding and no attention mask was given. class transformers.modeling_utils.ModuleUtilsMixin < source",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_44",
        "chunk_index": 44
      }
    },
    {
      "content": "and no attention mask was given. class transformers.modeling_utils.ModuleUtilsMixin < source > ( ) A few utilities for torch.nn.Modules, to be used as a mixin. Add a memory hook before and after each sub-module forward pass to record increase in memory consumption. Increase in memory consumption is stored in a mem_rss_diff attribute for each module and can be reset to zero with model.reset_memory_hooks_state(). estimate_tokens < source > ( input_dict: dict ) \u2192 int Parameters inputs (dict) \u2014 The model inputs. The total number of tokens. Helper function to estimate the total number of tokens from the model inputs. floating_point_ops < source > (",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_45",
        "chunk_index": 45
      }
    },
    {
      "content": "tokens from the model inputs. floating_point_ops < source > ( input_dict: dict exclude_embeddings: bool = True ) \u2192 int Parameters batch_size (int) \u2014 The batch size for the forward pass. sequence_length (int) \u2014 The number of tokens in each line of the batch. exclude_embeddings (bool, optional, defaults to True) \u2014 Whether or not to count embedding and softmax operations. The number of floating-point operations. Get number of (optionally, non-embeddings) floating-point operations for the forward and backward passes of a batch with this transformer model. Default approximation neglects the quadratic dependency on the number of tokens (valid if 12 * d_model << sequence_length)",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_46",
        "chunk_index": 46
      }
    },
    {
      "content": "number of tokens (valid if 12 * d_model << sequence_length) as laid out in this paper section 2.1. Should be overridden for transformers with parameter re-use e.g. Albert or Universal Transformers, or if doing long-range modeling with very high sequence lengths. get_extended_attention_mask < source > ( attention_mask: Tensor input_shape: tuple device: typing.Optional[torch.device] = None dtype: typing.Optional[torch.dtype] = None ) Parameters attention_mask (torch.Tensor) \u2014 Mask with ones indicating tokens to attend to, zeros for tokens to ignore. input_shape (tuple[int]) \u2014 The shape of the input to the model. Makes broadcastable attention and causal masks so that future and masked tokens are ignored. get_head_mask",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_47",
        "chunk_index": 47
      }
    },
    {
      "content": "masks so that future and masked tokens are ignored. get_head_mask < source > ( head_mask: typing.Optional[torch.Tensor] num_hidden_layers: int is_attention_chunked: bool = False ) Parameters head_mask (torch.Tensor with shape [num_heads] or [num_hidden_layers x num_heads], optional) \u2014 The mask indicating if we should keep the heads or not (1.0 for keep, 0.0 for discard). num_hidden_layers (int) \u2014 The number of hidden layers in the model. is_attention_chunked (bool, optional, defaults to False) \u2014 Whether or not the attentions scores are computed by chunks or not. Prepare the head mask if needed. invert_attention_mask < source > ( encoder_attention_mask: Tensor ) \u2192 torch.Tensor Parameters encoder_attention_mask (torch.Tensor) \u2014",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_48",
        "chunk_index": 48
      }
    },
    {
      "content": "( encoder_attention_mask: Tensor ) \u2192 torch.Tensor Parameters encoder_attention_mask (torch.Tensor) \u2014 An attention mask. The inverted attention mask. Invert an attention mask (e.g., switches 0. and 1.). num_parameters < source > ( only_trainable: bool = False exclude_embeddings: bool = False ) \u2192 int Parameters only_trainable (bool, optional, defaults to False) \u2014 Whether or not to return only the number of trainable parameters exclude_embeddings (bool, optional, defaults to False) \u2014 Whether or not to return only the number of non-embeddings parameters The number of parameters. Get number of (optionally, trainable or non-embeddings) parameters in the module.",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_49",
        "chunk_index": 49
      }
    },
    {
      "content": "the module.",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/model",
        "doc_id": "huggingface.co_docs_transformers_main_classes_model",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_model_chunk_50",
        "chunk_index": 50
      }
    }
  ]
}