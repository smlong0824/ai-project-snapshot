{
  "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
  "chunks": [
    {
      "content": "Tokenizer A tokenizer is in charge of preparing the inputs for a model. The library contains tokenizers for all the models. Most of the tokenizers are available in two flavors: a full python implementation and a \u201cFast\u201d implementation based on the Rust library \ud83e\udd17 Tokenizers. The \u201cFast\u201d implementations allows: a significant speed-up in particular when doing batched tokenization and additional methods to map between the original string (character and words) and the token space (e.g. getting the index of the token comprising a given character or the span of characters corresponding to a given token). The base classes PreTrainedTokenizer and PreTrainedTokenizerFast implement",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_0",
        "chunk_index": 0
      }
    },
    {
      "content": "a given token). The base classes PreTrainedTokenizer and PreTrainedTokenizerFast implement the common methods for encoding string inputs in model inputs (see below) and instantiating/saving python and \u201cFast\u201d tokenizers either from a local file or directory or from a pretrained tokenizer provided by the library (downloaded from HuggingFace\u2019s AWS S3 repository). They both rely on PreTrainedTokenizerBase that contains the common methods, and SpecialTokensMixin. PreTrainedTokenizer and PreTrainedTokenizerFast thus implement the main methods for using all the tokenizers: Tokenizing (splitting strings in sub-word token strings), converting tokens strings to ids and back, and encoding/decoding (i.e., tokenizing and converting to integers). Adding new tokens to the",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_1",
        "chunk_index": 1
      }
    },
    {
      "content": "tokenizing and converting to integers). Adding new tokens to the vocabulary in a way that is independent of the underlying structure (BPE, SentencePiece\u2026). Managing special tokens (like mask, beginning-of-sentence, etc.): adding them, assigning them to attributes in the tokenizer for easy access and making sure they are not split during tokenization. BatchEncoding holds the output of the PreTrainedTokenizerBase\u2019s encoding methods (__call__, encode_plus and batch_encode_plus) and is derived from a Python dictionary. When the tokenizer is a pure python tokenizer, this class behaves just like a standard python dictionary and holds the various model inputs computed by these methods (input_ids, attention_mask\u2026). When the",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_2",
        "chunk_index": 2
      }
    },
    {
      "content": "model inputs computed by these methods (input_ids, attention_mask\u2026). When the tokenizer is a \u201cFast\u201d tokenizer (i.e., backed by HuggingFace tokenizers library), this class provides in addition several advanced alignment methods which can be used to map between the original string (character and words) and the token space (e.g., getting the index of the token comprising a given character or the span of characters corresponding to a given token). Multimodal Tokenizer Apart from that each tokenizer can be a \u201cmultimodal\u201d tokenizer which means that the tokenizer will hold all relevant special tokens as part of tokenizer attributes for easier access. For example, if",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_3",
        "chunk_index": 3
      }
    },
    {
      "content": "part of tokenizer attributes for easier access. For example, if the tokenizer is loaded from a vision-language model like LLaVA, you will be able to access tokenizer.image_token_id to obtain the special image token used as a placeholder. To enable extra special tokens for any type of tokenizer, you have to add the following lines and save the tokenizer. Extra special tokens do not have to be modality related and can ne anything that the model often needs access to. In the below code, tokenizer at output_dir will have direct access to three more special tokens. vision_tokenizer = AutoTokenizer.from_pretrained( \"llava-hf/llava-1.5-7b-hf\", extra_special_tokens={\"image_token\": \"<image>\", \"boi_token\":",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_4",
        "chunk_index": 4
      }
    },
    {
      "content": "more special tokens. vision_tokenizer = AutoTokenizer.from_pretrained( \"llava-hf/llava-1.5-7b-hf\", extra_special_tokens={\"image_token\": \"<image>\", \"boi_token\": \"<image_start>\", \"eoi_token\": \"<image_end>\"} ) print(vision_tokenizer.image_token, vision_tokenizer.image_token_id) (\"<image>\", 32000) PreTrainedTokenizer class transformers.PreTrainedTokenizer < source > ( **kwargs ) Parameters model_max_length (int, optional) \u2014 The maximum length (in number of tokens) for the inputs to the transformer model. When the tokenizer is loaded with from_pretrained(), this will be set to the value stored for the associated model in max_model_input_sizes (see above). If no value is provided, will default to VERY_LARGE_INTEGER (int(1e30)). padding_side (str, optional) \u2014 The side on which the model should have padding applied. Should be selected between [\u2018right\u2019, \u2018left\u2019]. Default value is",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_5",
        "chunk_index": 5
      }
    },
    {
      "content": "applied. Should be selected between [\u2018right\u2019, \u2018left\u2019]. Default value is picked from the class attribute of the same name. truncation_side (str, optional) \u2014 The side on which the model should have truncation applied. Should be selected between [\u2018right\u2019, \u2018left\u2019]. Default value is picked from the class attribute of the same name. chat_template (str, optional) \u2014 A Jinja template string that will be used to format lists of chat messages. See https://huggingface.co/docs/transformers/chat_templating for a full description. model_input_names (list[string], optional) \u2014 The list of inputs accepted by the forward pass of the model (like \"token_type_ids\" or \"attention_mask\"). Default value is picked from the class",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_6",
        "chunk_index": 6
      }
    },
    {
      "content": "\"token_type_ids\" or \"attention_mask\"). Default value is picked from the class attribute of the same name. bos_token (str or tokenizers.AddedToken, optional) \u2014 A special token representing the beginning of a sentence. Will be associated to self.bos_token and self.bos_token_id. eos_token (str or tokenizers.AddedToken, optional) \u2014 A special token representing the end of a sentence. Will be associated to self.eos_token and self.eos_token_id. unk_token (str or tokenizers.AddedToken, optional) \u2014 A special token representing an out-of-vocabulary token. Will be associated to self.unk_token and self.unk_token_id. sep_token (str or tokenizers.AddedToken, optional) \u2014 A special token separating two different sentences in the same input (used by BERT for instance). Will",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_7",
        "chunk_index": 7
      }
    },
    {
      "content": "in the same input (used by BERT for instance). Will be associated to self.sep_token and self.sep_token_id. pad_token (str or tokenizers.AddedToken, optional) \u2014 A special token used to make arrays of tokens the same size for batching purpose. Will then be ignored by attention mechanisms or loss computation. Will be associated to self.pad_token and self.pad_token_id. cls_token (str or tokenizers.AddedToken, optional) \u2014 A special token representing the class of the input (used by BERT for instance). Will be associated to self.cls_token and self.cls_token_id. mask_token (str or tokenizers.AddedToken, optional) \u2014 A special token representing a masked token (used by masked-language modeling pretraining objectives, like BERT).",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_8",
        "chunk_index": 8
      }
    },
    {
      "content": "masked token (used by masked-language modeling pretraining objectives, like BERT). Will be associated to self.mask_token and self.mask_token_id. additional_special_tokens (tuple or list of str or tokenizers.AddedToken, optional) \u2014 A tuple or a list of additional special tokens. Add them here to ensure they are skipped when decoding with skip_special_tokens is set to True. If they are not part of the vocabulary, they will be added at the end of the vocabulary. clean_up_tokenization_spaces (bool, optional, defaults to True) \u2014 Whether or not the model should cleanup the spaces that were added when splitting the input text during the tokenization process. split_special_tokens (bool, optional, defaults",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_9",
        "chunk_index": 9
      }
    },
    {
      "content": "input text during the tokenization process. split_special_tokens (bool, optional, defaults to False) \u2014 Whether or not the special tokens should be split during the tokenization process. Passing will affect the internal state of the tokenizer. The default behavior is to not split special tokens. This means that if <s> is the bos_token, then tokenizer.tokenize(\"<s>\") = ['<s>]. Otherwise, if split_special_tokens=True, then tokenizer.tokenize(\"<s>\") will be give ['<','s', '>']. Base class for all slow tokenizers. Inherits from PreTrainedTokenizerBase. Handle all the shared methods for tokenization and special tokens as well as methods downloading/caching/loading pretrained tokenizers as well as adding tokens to the vocabulary. This class",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_10",
        "chunk_index": 10
      }
    },
    {
      "content": "as well as adding tokens to the vocabulary. This class also contain the added tokens in a unified way on top of all tokenizers so we don\u2019t have to handle the specific vocabulary augmentation methods of the various underlying dictionary structures (BPE, sentencepiece\u2026). Class attributes (overridden by derived classes) vocab_files_names (dict[str, str]) \u2014 A dictionary with, as keys, the __init__ keyword name of each vocabulary file required by the model, and as associated values, the filename for saving the associated file (string). pretrained_vocab_files_map (dict[str, dict[str, str]]) \u2014 A dictionary of dictionaries, with the high-level keys being the __init__ keyword name of each",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_11",
        "chunk_index": 11
      }
    },
    {
      "content": "the high-level keys being the __init__ keyword name of each vocabulary file required by the model, the low-level being the short-cut-names of the pretrained models with, as associated values, the url to the associated pretrained vocabulary file. model_input_names (list[str]) \u2014 A list of inputs expected in the forward pass of the model. padding_side (str) \u2014 The default value for the side on which the model should have padding applied. Should be 'right' or 'left'. truncation_side (str) \u2014 The default value for the side on which the model should have truncation applied. Should be 'right' or 'left'. __call__ < source > ( text:",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_12",
        "chunk_index": 12
      }
    },
    {
      "content": "be 'right' or 'left'. __call__ < source > ( text: typing.Union[str, list[str], list[list[str]], NoneType] = None text_pair: typing.Union[str, list[str], list[list[str]], NoneType] = None text_target: typing.Union[str, list[str], list[list[str]], NoneType] = None text_pair_target: typing.Union[str, list[str], list[list[str]], NoneType] = None add_special_tokens: bool = True padding: typing.Union[bool, str, transformers.utils.generic.PaddingStrategy] = False truncation: typing.Union[bool, str, transformers.tokenization_utils_base.TruncationStrategy, NoneType] = None max_length: typing.Optional[int] = None stride: int = 0 is_split_into_words: bool = False pad_to_multiple_of: typing.Optional[int] = None padding_side: typing.Optional[str] = None return_tensors: typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None return_token_type_ids: typing.Optional[bool] = None return_attention_mask: typing.Optional[bool] = None return_overflowing_tokens: bool = False return_special_tokens_mask: bool = False return_offsets_mapping: bool = False return_length: bool",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_13",
        "chunk_index": 13
      }
    },
    {
      "content": "return_special_tokens_mask: bool = False return_offsets_mapping: bool = False return_length: bool = False verbose: bool = True **kwargs ) \u2192 BatchEncoding Parameters text (str, list[str], list[list[str]], optional) \u2014 The sequence or batch of sequences to be encoded. Each sequence can be a string or a list of strings (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set is_split_into_words=True (to lift the ambiguity with a batch of sequences). text_pair (str, list[str], list[list[str]], optional) \u2014 The sequence or batch of sequences to be encoded. Each sequence can be a string or a list of strings (pretokenized string). If the",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_14",
        "chunk_index": 14
      }
    },
    {
      "content": "string or a list of strings (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set is_split_into_words=True (to lift the ambiguity with a batch of sequences). text_target (str, list[str], list[list[str]], optional) \u2014 The sequence or batch of sequences to be encoded as target texts. Each sequence can be a string or a list of strings (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set is_split_into_words=True (to lift the ambiguity with a batch of sequences). text_pair_target (str, list[str], list[list[str]], optional) \u2014 The sequence or batch of sequences to be encoded as target",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_15",
        "chunk_index": 15
      }
    },
    {
      "content": "sequence or batch of sequences to be encoded as target texts. Each sequence can be a string or a list of strings (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set is_split_into_words=True (to lift the ambiguity with a batch of sequences). add_special_tokens (bool, optional, defaults to True) \u2014 Whether or not to add special tokens when encoding the sequences. This will use the underlying PretrainedTokenizerBase.build_inputs_with_special_tokens function, which defines which tokens are automatically added to the input ids. This is useful if you want to add bos or eos tokens automatically. padding (bool, str or PaddingStrategy, optional,",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_16",
        "chunk_index": 16
      }
    },
    {
      "content": "or eos tokens automatically. padding (bool, str or PaddingStrategy, optional, defaults to False) \u2014 Activates and controls padding. Accepts the following values: True or 'longest': Pad to the longest sequence in the batch (or no padding if only a single sequence is provided). 'max_length': Pad to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. False or 'do_not_pad' (default): No padding (i.e., can output a batch with sequences of different lengths). truncation (bool, str or TruncationStrategy, optional, defaults to False) \u2014 Activates and controls truncation. Accepts the",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_17",
        "chunk_index": 17
      }
    },
    {
      "content": "defaults to False) \u2014 Activates and controls truncation. Accepts the following values: True or 'longest_first': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will truncate token by token, removing a token from the longest sequence in the pair if a pair of sequences (or a batch of pairs) is provided. 'only_first': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will only truncate the first",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_18",
        "chunk_index": 18
      }
    },
    {
      "content": "argument is not provided. This will only truncate the first sequence of a pair if a pair of sequences (or a batch of pairs) is provided. 'only_second': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will only truncate the second sequence of a pair if a pair of sequences (or a batch of pairs) is provided. False or 'do_not_truncate' (default): No truncation (i.e., can output batch with sequence lengths greater than the model maximum admissible input size). max_length (int, optional) \u2014 Controls the",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_19",
        "chunk_index": 19
      }
    },
    {
      "content": "maximum admissible input size). max_length (int, optional) \u2014 Controls the maximum length to use by one of the truncation/padding parameters. If left unset or set to None, this will use the predefined model maximum length if a maximum length is required by one of the truncation/padding parameters. If the model has no specific maximum input length (like XLNet) truncation/padding to a maximum length will be deactivated. stride (int, optional, defaults to 0) \u2014 If set to a number along with max_length, the overflowing tokens returned when return_overflowing_tokens=True will contain some tokens from the end of the truncated sequence returned to provide some",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_20",
        "chunk_index": 20
      }
    },
    {
      "content": "the end of the truncated sequence returned to provide some overlap between truncated and overflowing sequences. The value of this argument defines the number of overlapping tokens. is_split_into_words (bool, optional, defaults to False) \u2014 Whether or not the input is already pre-tokenized (e.g., split into words). If set to True, the tokenizer assumes the input is already split into words (for instance, by splitting it on whitespace) which it will tokenize. This is useful for NER or token classification. pad_to_multiple_of (int, optional) \u2014 If set will pad the sequence to a multiple of the provided value. Requires padding to be activated. This",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_21",
        "chunk_index": 21
      }
    },
    {
      "content": "of the provided value. Requires padding to be activated. This is especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute capability >= 7.5 (Volta). padding_side (str, optional) \u2014 The side on which the model should have padding applied. Should be selected between [\u2018right\u2019, \u2018left\u2019]. Default value is picked from the class attribute of the same name. return_tensors (str or TensorType, optional) \u2014 If set, will return tensors instead of list of python integers. Acceptable values are: 'tf': Return TensorFlow tf.constant objects. 'pt': Return PyTorch torch.Tensor objects. 'np': Return Numpy np.ndarray objects. return_token_type_ids (bool, optional) \u2014 Whether to",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_22",
        "chunk_index": 22
      }
    },
    {
      "content": "Return Numpy np.ndarray objects. return_token_type_ids (bool, optional) \u2014 Whether to return token type IDs. If left to the default, will return the token type IDs according to the specific tokenizer\u2019s default, defined by the return_outputs attribute. What are token type IDs? return_attention_mask (bool, optional) \u2014 Whether to return the attention mask. If left to the default, will return the attention mask according to the specific tokenizer\u2019s default, defined by the return_outputs attribute. What are attention masks? return_overflowing_tokens (bool, optional, defaults to False) \u2014 Whether or not to return overflowing token sequences. If a pair of sequences of input ids (or a batch",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_23",
        "chunk_index": 23
      }
    },
    {
      "content": "a pair of sequences of input ids (or a batch of pairs) is provided with truncation_strategy = longest_first or True, an error is raised instead of returning overflowing tokens. return_special_tokens_mask (bool, optional, defaults to False) \u2014 Whether or not to return special tokens mask information. return_offsets_mapping (bool, optional, defaults to False) \u2014 Whether or not to return (char_start, char_end) for each token. This is only available on fast tokenizers inheriting from PreTrainedTokenizerFast, if using Python\u2019s tokenizer, this method will raise NotImplementedError. return_length (bool, optional, defaults to False) \u2014 Whether or not to return the lengths of the encoded inputs. verbose (bool, optional,",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_24",
        "chunk_index": 24
      }
    },
    {
      "content": "return the lengths of the encoded inputs. verbose (bool, optional, defaults to True) \u2014 Whether or not to print more information and warnings. **kwargs \u2014 passed to the self.tokenize() method A BatchEncoding with the following fields: input_ids \u2014 List of token ids to be fed to a model. What are input IDs? token_type_ids \u2014 List of token type ids to be fed to a model (when return_token_type_ids=True or if \u201ctoken_type_ids\u201d is in self.model_input_names). What are token type IDs? attention_mask \u2014 List of indices specifying which tokens should be attended to by the model (when return_attention_mask=True or if \u201cattention_mask\u201d is in self.model_input_names). What",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_25",
        "chunk_index": 25
      }
    },
    {
      "content": "model (when return_attention_mask=True or if \u201cattention_mask\u201d is in self.model_input_names). What are attention masks? overflowing_tokens \u2014 List of overflowing tokens sequences (when a max_length is specified and return_overflowing_tokens=True). num_truncated_tokens \u2014 Number of tokens truncated (when a max_length is specified and return_overflowing_tokens=True). special_tokens_mask \u2014 List of 0s and 1s, with 1 specifying added special tokens and 0 specifying regular sequence tokens (when add_special_tokens=True and return_special_tokens_mask=True). length \u2014 The length of the inputs (when return_length=True) Main method to tokenize and prepare for the model one or several sequence(s) or one or several pair(s) of sequences. add_tokens < source > ( new_tokens: typing.Union[str, tokenizers.AddedToken, collections.abc.Sequence[typing.Union[str, tokenizers.AddedToken]]]",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_26",
        "chunk_index": 26
      }
    },
    {
      "content": "add_tokens < source > ( new_tokens: typing.Union[str, tokenizers.AddedToken, collections.abc.Sequence[typing.Union[str, tokenizers.AddedToken]]] special_tokens: bool = False ) \u2192 int Parameters new_tokens (str, tokenizers.AddedToken or a sequence of str or tokenizers.AddedToken) \u2014 Tokens are only added if they are not already in the vocabulary. tokenizers.AddedToken wraps a string token to let you personalize its behavior: whether this token should only match against a single word, whether this token should strip all potential whitespaces on the left side, whether this token should strip all potential whitespaces on the right side, etc. special_tokens (bool, optional, defaults to False) \u2014 Can be used to specify if the token",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_27",
        "chunk_index": 27
      }
    },
    {
      "content": "False) \u2014 Can be used to specify if the token is a special token. This mostly change the normalization behavior (special tokens like CLS or [MASK] are usually not lower-cased for instance). See details for tokenizers.AddedToken in HuggingFace tokenizers library. Number of tokens added to the vocabulary. Add a list of new tokens to the tokenizer class. If the new tokens are not in the vocabulary, they are added to it with indices starting from length of the current vocabulary and will be isolated before the tokenization algorithm is applied. Added tokens and tokens from the vocabulary of the tokenization algorithm are",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_28",
        "chunk_index": 28
      }
    },
    {
      "content": "and tokens from the vocabulary of the tokenization algorithm are therefore not treated in the same way. Note, when adding new tokens to the vocabulary, you should make sure to also resize the token embedding matrix of the model so that its embedding matrix matches the tokenizer. In order to do that, please use the resize_token_embeddings() method. Examples: tokenizer = BertTokenizerFast.from_pretrained(\"google-bert/bert-base-uncased\") model = BertModel.from_pretrained(\"google-bert/bert-base-uncased\") num_added_toks = tokenizer.add_tokens([\"new_tok1\", \"my_new-tok2\"]) print(\"We have added\", num_added_toks, \"tokens\") model.resize_token_embeddings(len(tokenizer)) add_special_tokens < source > ( special_tokens_dict: dict replace_additional_special_tokens = True ) \u2192 int Parameters special_tokens_dict (dictionary str to str, tokenizers.AddedToken, or Sequence[Union[str, AddedToken]]) \u2014 Keys should be in",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_29",
        "chunk_index": 29
      }
    },
    {
      "content": "str, tokenizers.AddedToken, or Sequence[Union[str, AddedToken]]) \u2014 Keys should be in the list of predefined special attributes: [bos_token, eos_token, unk_token, sep_token, pad_token, cls_token, mask_token, additional_special_tokens]. Tokens are only added if they are not already in the vocabulary (tested by checking if the tokenizer assign the index of the unk_token to them). replace_additional_special_tokens (bool, optional,, defaults to True) \u2014 If True, the existing list of additional special tokens will be replaced by the list provided in special_tokens_dict. Otherwise, self._special_tokens_map[\"additional_special_tokens\"] is just extended. In the former case, the tokens will NOT be removed from the tokenizer\u2019s full vocabulary - they are only being flagged as",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_30",
        "chunk_index": 30
      }
    },
    {
      "content": "tokenizer\u2019s full vocabulary - they are only being flagged as non-special tokens. Remember, this only affects which tokens are skipped during decoding, not the added_tokens_encoder and added_tokens_decoder. This means that the previous additional_special_tokens are still added tokens, and will not be split by the model. Number of tokens added to the vocabulary. Add a dictionary of special tokens (eos, pad, cls, etc.) to the encoder and link them to class attributes. If special tokens are NOT in the vocabulary, they are added to it (indexed starting from the last index of the current vocabulary). When adding new tokens to the vocabulary, you",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_31",
        "chunk_index": 31
      }
    },
    {
      "content": "current vocabulary). When adding new tokens to the vocabulary, you should make sure to also resize the token embedding matrix of the model so that its embedding matrix matches the tokenizer. In order to do that, please use the resize_token_embeddings() method. Using add_special_tokens will ensure your special tokens can be used in several ways: Special tokens can be skipped when decoding using skip_special_tokens = True. Special tokens are carefully handled by the tokenizer (they are never split), similar to AddedTokens. You can easily refer to special tokens using tokenizer class attributes like tokenizer.cls_token. This makes it easy to develop model-agnostic training and",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_32",
        "chunk_index": 32
      }
    },
    {
      "content": "tokenizer.cls_token. This makes it easy to develop model-agnostic training and fine-tuning scripts. When possible, special tokens are already registered for provided pretrained models (for instance BertTokenizer cls_token is already registered to be '[CLS]' and XLM\u2019s one is also registered to be '</s>'). Examples: tokenizer = GPT2Tokenizer.from_pretrained(\"openai-community/gpt2\") model = GPT2Model.from_pretrained(\"openai-community/gpt2\") special_tokens_dict = {\"cls_token\": \"<CLS>\"} num_added_toks = tokenizer.add_special_tokens(special_tokens_dict) print(\"We have added\", num_added_toks, \"tokens\") model.resize_token_embeddings(len(tokenizer)) assert tokenizer.cls_token == \"<CLS>\" apply_chat_template < source > ( conversation: typing.Union[list[dict[str, str]], list[list[dict[str, str]]]] tools: typing.Optional[list[typing.Union[dict, typing.Callable]]] = None documents: typing.Optional[list[dict[str, str]]] = None chat_template: typing.Optional[str] = None add_generation_prompt: bool = False continue_final_message: bool = False tokenize: bool = True",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_33",
        "chunk_index": 33
      }
    },
    {
      "content": "= False continue_final_message: bool = False tokenize: bool = True padding: typing.Union[bool, str, transformers.utils.generic.PaddingStrategy] = False truncation: bool = False max_length: typing.Optional[int] = None return_tensors: typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None return_dict: bool = False return_assistant_tokens_mask: bool = False tokenizer_kwargs: typing.Optional[dict[str, typing.Any]] = None **kwargs ) \u2192 Union[list[int], Dict] Parameters conversation (Union[list[dict[str, str]], list[list[dict[str, str]]]]) \u2014 A list of dicts with \u201crole\u201d and \u201ccontent\u201d keys, representing the chat history so far. tools (list[Union[Dict, Callable]], optional) \u2014 A list of tools (callable functions) that will be accessible to the model. If the template does not support function calling, this argument will have no effect.",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_34",
        "chunk_index": 34
      }
    },
    {
      "content": "not support function calling, this argument will have no effect. Each tool should be passed as a JSON Schema, giving the name, description and argument types for the tool. See our tool use guide for more information. documents (list[dict[str, str]], optional) \u2014 A list of dicts representing documents that will be accessible to the model if it is performing RAG (retrieval-augmented generation). If the template does not support RAG, this argument will have no effect. We recommend that each document should be a dict containing \u201ctitle\u201d and \u201ctext\u201d keys. chat_template (str, optional) \u2014 A Jinja template to use for this conversion. It",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_35",
        "chunk_index": 35
      }
    },
    {
      "content": "\u2014 A Jinja template to use for this conversion. It is usually not necessary to pass anything to this argument, as the model\u2019s template will be used by default. add_generation_prompt (bool, optional) \u2014 If this is set, a prompt with the token(s) that indicate the start of an assistant message will be appended to the formatted output. This is useful when you want to generate a response from the model. Note that this argument will be passed to the chat template, and so it must be supported in the template for this argument to have any effect. continue_final_message (bool, optional) \u2014 If",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_36",
        "chunk_index": 36
      }
    },
    {
      "content": "argument to have any effect. continue_final_message (bool, optional) \u2014 If this is set, the chat will be formatted so that the final message in the chat is open-ended, without any EOS tokens. The model will continue this message rather than starting a new one. This allows you to \u201cprefill\u201d part of the model\u2019s response for it. Cannot be used at the same time as add_generation_prompt. tokenize (bool, defaults to True) \u2014 Whether to tokenize the output. If False, the output will be a string. padding (bool, str or PaddingStrategy, optional, defaults to False) \u2014 Select a strategy to pad the returned sequences",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_37",
        "chunk_index": 37
      }
    },
    {
      "content": "False) \u2014 Select a strategy to pad the returned sequences (according to the model\u2019s padding side and padding index) among: True or 'longest': Pad to the longest sequence in the batch (or no padding if only a single sequence if provided). 'max_length': Pad to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. False or 'do_not_pad' (default): No padding (i.e., can output a batch with sequences of different lengths). truncation (bool, defaults to False) \u2014 Whether to truncate sequences at the maximum length. Has no effect if",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_38",
        "chunk_index": 38
      }
    },
    {
      "content": "truncate sequences at the maximum length. Has no effect if tokenize is False. max_length (int, optional) \u2014 Maximum length (in tokens) to use for padding or truncation. Has no effect if tokenize is False. If not specified, the tokenizer\u2019s max_length attribute will be used as a default. return_tensors (str or TensorType, optional) \u2014 If set, will return tensors of a particular framework. Has no effect if tokenize is False. Acceptable values are: 'tf': Return TensorFlow tf.Tensor objects. 'pt': Return PyTorch torch.Tensor objects. 'np': Return NumPy np.ndarray objects. 'jax': Return JAX jnp.ndarray objects. return_dict (bool, defaults to False) \u2014 Whether to return a",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_39",
        "chunk_index": 39
      }
    },
    {
      "content": "return_dict (bool, defaults to False) \u2014 Whether to return a dictionary with named outputs. Has no effect if tokenize is False. tokenizer_kwargs (dict[str -- Any], optional): Additional kwargs to pass to the tokenizer. return_assistant_tokens_mask (bool, defaults to False) \u2014 Whether to return a mask of the assistant generated tokens. For tokens generated by the assistant, the mask will contain 1. For user and system tokens, the mask will contain 0. This functionality is only available for chat templates that support it via the {% generation %} keyword. **kwargs \u2014 Additional kwargs to pass to the template renderer. Will be accessible by the",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_40",
        "chunk_index": 40
      }
    },
    {
      "content": "pass to the template renderer. Will be accessible by the chat template. Returns Union[list[int], Dict] A list of token ids representing the tokenized chat so far, including control tokens. This output is ready to pass to the model, either directly or via methods like generate(). If return_dict is set, will return a dict of tokenizer outputs instead. Converts a list of dictionaries with \"role\" and \"content\" keys to a list of token ids. This method is intended for use with chat models, and will read the tokenizer\u2019s chat_template attribute to determine the format and control tokens to use when converting. batch_decode <",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_41",
        "chunk_index": 41
      }
    },
    {
      "content": "format and control tokens to use when converting. batch_decode < source > ( sequences: typing.Union[list[int], list[list[int]], ForwardRef('np.ndarray'), ForwardRef('torch.Tensor'), ForwardRef('tf.Tensor')] skip_special_tokens: bool = False clean_up_tokenization_spaces: typing.Optional[bool] = None **kwargs ) \u2192 list[str] Parameters sequences (Union[list[int], list[list[int]], np.ndarray, torch.Tensor, tf.Tensor]) \u2014 List of tokenized input ids. Can be obtained using the __call__ method. skip_special_tokens (bool, optional, defaults to False) \u2014 Whether or not to remove special tokens in the decoding. clean_up_tokenization_spaces (bool, optional) \u2014 Whether or not to clean up the tokenization spaces. If None, will default to self.clean_up_tokenization_spaces. kwargs (additional keyword arguments, optional) \u2014 Will be passed to the underlying model specific decode",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_42",
        "chunk_index": 42
      }
    },
    {
      "content": "\u2014 Will be passed to the underlying model specific decode method. The list of decoded sentences. Convert a list of lists of token ids into a list of strings by calling decode. decode < source > ( token_ids: typing.Union[int, list[int], numpy.ndarray, ForwardRef('torch.Tensor')] skip_special_tokens: bool = False clean_up_tokenization_spaces: typing.Optional[bool] = None **kwargs ) \u2192 str Parameters token_ids (Union[int, list[int], np.ndarray, torch.Tensor, tf.Tensor]) \u2014 List of tokenized input ids. Can be obtained using the __call__ method. skip_special_tokens (bool, optional, defaults to False) \u2014 Whether or not to remove special tokens in the decoding. clean_up_tokenization_spaces (bool, optional) \u2014 Whether or not to clean up the",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_43",
        "chunk_index": 43
      }
    },
    {
      "content": "(bool, optional) \u2014 Whether or not to clean up the tokenization spaces. If None, will default to self.clean_up_tokenization_spaces. kwargs (additional keyword arguments, optional) \u2014 Will be passed to the underlying model specific decode method. The decoded sentence. Converts a sequence of ids in a string, using the tokenizer and vocabulary with options to remove special tokens and clean up tokenization spaces. Similar to doing self.convert_tokens_to_string(self.convert_ids_to_tokens(token_ids)). encode < source > ( text: typing.Union[str, list[str], list[int]] text_pair: typing.Union[str, list[str], list[int], NoneType] = None add_special_tokens: bool = True padding: typing.Union[bool, str, transformers.utils.generic.PaddingStrategy] = False truncation: typing.Union[bool, str, transformers.tokenization_utils_base.TruncationStrategy, NoneType] = None max_length: typing.Optional[int] = None",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_44",
        "chunk_index": 44
      }
    },
    {
      "content": "typing.Union[bool, str, transformers.tokenization_utils_base.TruncationStrategy, NoneType] = None max_length: typing.Optional[int] = None stride: int = 0 padding_side: typing.Optional[str] = None return_tensors: typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None **kwargs ) \u2192 list[int], torch.Tensor, tf.Tensor or np.ndarray Parameters text (str, list[str] or list[int]) \u2014 The first sequence to be encoded. This can be a string, a list of strings (tokenized string using the tokenize method) or a list of integers (tokenized string ids using the convert_tokens_to_ids method). text_pair (str, list[str] or list[int], optional) \u2014 Optional second sequence to be encoded. This can be a string, a list of strings (tokenized string using the tokenize method) or a",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_45",
        "chunk_index": 45
      }
    },
    {
      "content": "of strings (tokenized string using the tokenize method) or a list of integers (tokenized string ids using the convert_tokens_to_ids method). add_special_tokens (bool, optional, defaults to True) \u2014 Whether or not to add special tokens when encoding the sequences. This will use the underlying PretrainedTokenizerBase.build_inputs_with_special_tokens function, which defines which tokens are automatically added to the input ids. This is useful if you want to add bos or eos tokens automatically. padding (bool, str or PaddingStrategy, optional, defaults to False) \u2014 Activates and controls padding. Accepts the following values: True or 'longest': Pad to the longest sequence in the batch (or no padding if",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_46",
        "chunk_index": 46
      }
    },
    {
      "content": "the longest sequence in the batch (or no padding if only a single sequence is provided). 'max_length': Pad to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. False or 'do_not_pad' (default): No padding (i.e., can output a batch with sequences of different lengths). truncation (bool, str or TruncationStrategy, optional, defaults to False) \u2014 Activates and controls truncation. Accepts the following values: True or 'longest_first': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_47",
        "chunk_index": 47
      }
    },
    {
      "content": "the maximum acceptable input length for the model if that argument is not provided. This will truncate token by token, removing a token from the longest sequence in the pair if a pair of sequences (or a batch of pairs) is provided. 'only_first': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will only truncate the first sequence of a pair if a pair of sequences (or a batch of pairs) is provided. 'only_second': Truncate to a maximum length specified with the argument max_length",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_48",
        "chunk_index": 48
      }
    },
    {
      "content": "Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will only truncate the second sequence of a pair if a pair of sequences (or a batch of pairs) is provided. False or 'do_not_truncate' (default): No truncation (i.e., can output batch with sequence lengths greater than the model maximum admissible input size). max_length (int, optional) \u2014 Controls the maximum length to use by one of the truncation/padding parameters. If left unset or set to None, this will use the predefined model maximum length if a",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_49",
        "chunk_index": 49
      }
    },
    {
      "content": "this will use the predefined model maximum length if a maximum length is required by one of the truncation/padding parameters. If the model has no specific maximum input length (like XLNet) truncation/padding to a maximum length will be deactivated. stride (int, optional, defaults to 0) \u2014 If set to a number along with max_length, the overflowing tokens returned when return_overflowing_tokens=True will contain some tokens from the end of the truncated sequence returned to provide some overlap between truncated and overflowing sequences. The value of this argument defines the number of overlapping tokens. is_split_into_words (bool, optional, defaults to False) \u2014 Whether or not",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_50",
        "chunk_index": 50
      }
    },
    {
      "content": "is_split_into_words (bool, optional, defaults to False) \u2014 Whether or not the input is already pre-tokenized (e.g., split into words). If set to True, the tokenizer assumes the input is already split into words (for instance, by splitting it on whitespace) which it will tokenize. This is useful for NER or token classification. pad_to_multiple_of (int, optional) \u2014 If set will pad the sequence to a multiple of the provided value. Requires padding to be activated. This is especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute capability >= 7.5 (Volta). padding_side (str, optional) \u2014 The side on which",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_51",
        "chunk_index": 51
      }
    },
    {
      "content": "7.5 (Volta). padding_side (str, optional) \u2014 The side on which the model should have padding applied. Should be selected between [\u2018right\u2019, \u2018left\u2019]. Default value is picked from the class attribute of the same name. return_tensors (str or TensorType, optional) \u2014 If set, will return tensors instead of list of python integers. Acceptable values are: 'tf': Return TensorFlow tf.constant objects. 'pt': Return PyTorch torch.Tensor objects. 'np': Return Numpy np.ndarray objects. **kwargs \u2014 Passed along to the .tokenize() method. Returns list[int], torch.Tensor, tf.Tensor or np.ndarray The tokenized ids of the text. Converts a string to a sequence of ids (integer), using the tokenizer and",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_52",
        "chunk_index": 52
      }
    },
    {
      "content": "to a sequence of ids (integer), using the tokenizer and vocabulary. Same as doing self.convert_tokens_to_ids(self.tokenize(text)). push_to_hub < source > ( repo_id: str use_temp_dir: typing.Optional[bool] = None commit_message: typing.Optional[str] = None private: typing.Optional[bool] = None token: typing.Union[bool, str, NoneType] = None max_shard_size: typing.Union[str, int, NoneType] = '5GB' create_pr: bool = False safe_serialization: bool = True revision: typing.Optional[str] = None commit_description: typing.Optional[str] = None tags: typing.Optional[list[str]] = None **deprecated_kwargs ) Parameters repo_id (str) \u2014 The name of the repository you want to push your tokenizer to. It should contain your organization name when pushing to a given organization. use_temp_dir (bool, optional) \u2014 Whether or",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_53",
        "chunk_index": 53
      }
    },
    {
      "content": "to a given organization. use_temp_dir (bool, optional) \u2014 Whether or not to use a temporary directory to store the files saved before they are pushed to the Hub. Will default to True if there is no directory named like repo_id, False otherwise. commit_message (str, optional) \u2014 Message to commit while pushing. Will default to \"Upload tokenizer\". private (bool, optional) \u2014 Whether to make the repo private. If None (default), the repo will be public unless the organization\u2019s default is private. This value is ignored if the repo already exists. token (bool or str, optional) \u2014 The token to use as HTTP bearer",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_54",
        "chunk_index": 54
      }
    },
    {
      "content": "str, optional) \u2014 The token to use as HTTP bearer authorization for remote files. If True, will use the token generated when running hf auth login (stored in ~/.huggingface). Will default to True if repo_url is not specified. max_shard_size (int or str, optional, defaults to \"5GB\") \u2014 Only applicable for models. The maximum size for a checkpoint before being sharded. Checkpoints shard will then be each of size lower than this size. If expressed as a string, needs to be digits followed by a unit (like \"5MB\"). We default it to \"5GB\" so that users can easily load models on free-tier Google",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_55",
        "chunk_index": 55
      }
    },
    {
      "content": "so that users can easily load models on free-tier Google Colab instances without any CPU OOM issues. create_pr (bool, optional, defaults to False) \u2014 Whether or not to create a PR with the uploaded files or directly commit. safe_serialization (bool, optional, defaults to True) \u2014 Whether or not to convert the model weights in safetensors format for safer serialization. revision (str, optional) \u2014 Branch to push the uploaded files to. commit_description (str, optional) \u2014 The description of the commit that will be created tags (list[str], optional) \u2014 List of tags to push on the Hub. Upload the tokenizer files to the \ud83e\udd17",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_56",
        "chunk_index": 56
      }
    },
    {
      "content": "on the Hub. Upload the tokenizer files to the \ud83e\udd17 Model Hub. Examples: from transformers import AutoTokenizer tokenizer = AutoTokenizer.from_pretrained(\"google-bert/bert-base-cased\") tokenizer.push_to_hub(\"my-finetuned-bert\") tokenizer.push_to_hub(\"huggingface/my-finetuned-bert\") convert_ids_to_tokens < source > ( ids: typing.Union[int, list[int]] skip_special_tokens: bool = False ) \u2192 str or list[str] Parameters ids (int or list[int]) \u2014 The token id (or token ids) to convert to tokens. skip_special_tokens (bool, optional, defaults to False) \u2014 Whether or not to remove special tokens in the decoding. The decoded token(s). Converts a single index or a sequence of indices in a token or a sequence of tokens, using the vocabulary and added tokens. convert_tokens_to_ids < source >",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_57",
        "chunk_index": 57
      }
    },
    {
      "content": "using the vocabulary and added tokens. convert_tokens_to_ids < source > ( tokens: typing.Union[str, list[str]] ) \u2192 int or list[int] Parameters tokens (str or list[str]) \u2014 One or several token(s) to convert to token id(s). The token id or list of token ids. Converts a token string (or a sequence of tokens) in a single integer id (or a sequence of ids), using the vocabulary. Returns the added tokens in the vocabulary as a dictionary of token to index. Results might be different from the fast call because for now we always add the tokens even if they are already in the vocabulary.",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_58",
        "chunk_index": 58
      }
    },
    {
      "content": "the tokens even if they are already in the vocabulary. This is something we should change. num_special_tokens_to_add < source > ( pair: bool = False ) \u2192 int Parameters pair (bool, optional, defaults to False) \u2014 Whether the number of added tokens should be computed in the case of a sequence pair or a single sequence. Number of special tokens added to sequences. Returns the number of added tokens when encoding a sequence with special tokens. This encodes a dummy input and checks the number of added tokens, and is therefore not efficient. Do not put this inside your training loop. prepare_for_tokenization",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_59",
        "chunk_index": 59
      }
    },
    {
      "content": "efficient. Do not put this inside your training loop. prepare_for_tokenization < source > ( text: str is_split_into_words: bool = False **kwargs ) \u2192 tuple[str, dict[str, Any]] Parameters text (str) \u2014 The text to prepare. is_split_into_words (bool, optional, defaults to False) \u2014 Whether or not the input is already pre-tokenized (e.g., split into words). If set to True, the tokenizer assumes the input is already split into words (for instance, by splitting it on whitespace) which it will tokenize. This is useful for NER or token classification. kwargs (dict[str, Any], optional) \u2014 Keyword arguments to use for the tokenization. Returns tuple[str, dict[str, Any]]",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_60",
        "chunk_index": 60
      }
    },
    {
      "content": "arguments to use for the tokenization. Returns tuple[str, dict[str, Any]] The prepared text and the unused kwargs. Performs any necessary transformations before tokenization. This method should pop the arguments from kwargs and return the remaining kwargs as well. We test the kwargs at the end of the encoding process to be sure all the arguments have been used. tokenize < source > ( text: str **kwargs ) \u2192 list[str] Parameters text (str) \u2014 The sequence to be encoded. **kwargs (additional keyword arguments) \u2014 Passed along to the model-specific prepare_for_tokenization preprocessing method. The list of tokens. Converts a string into a sequence of",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_61",
        "chunk_index": 61
      }
    },
    {
      "content": "list of tokens. Converts a string into a sequence of tokens, using the tokenizer. Split in words for word-based vocabulary or sub-words for sub-word-based vocabularies (BPE/SentencePieces/WordPieces). Takes care of added tokens. PreTrainedTokenizerFast The PreTrainedTokenizerFast depend on the tokenizers library. The tokenizers obtained from the \ud83e\udd17 tokenizers library can be loaded very simply into \ud83e\udd17 transformers. Take a look at the Using tokenizers from \ud83e\udd17 tokenizers page to understand how this is done. class transformers.PreTrainedTokenizerFast < source > ( *args **kwargs ) Parameters model_max_length (int, optional) \u2014 The maximum length (in number of tokens) for the inputs to the transformer model. When the",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_62",
        "chunk_index": 62
      }
    },
    {
      "content": "tokens) for the inputs to the transformer model. When the tokenizer is loaded with from_pretrained(), this will be set to the value stored for the associated model in max_model_input_sizes (see above). If no value is provided, will default to VERY_LARGE_INTEGER (int(1e30)). padding_side (str, optional) \u2014 The side on which the model should have padding applied. Should be selected between [\u2018right\u2019, \u2018left\u2019]. Default value is picked from the class attribute of the same name. truncation_side (str, optional) \u2014 The side on which the model should have truncation applied. Should be selected between [\u2018right\u2019, \u2018left\u2019]. Default value is picked from the class attribute of",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_63",
        "chunk_index": 63
      }
    },
    {
      "content": "\u2018left\u2019]. Default value is picked from the class attribute of the same name. chat_template (str, optional) \u2014 A Jinja template string that will be used to format lists of chat messages. See https://huggingface.co/docs/transformers/chat_templating for a full description. model_input_names (list[string], optional) \u2014 The list of inputs accepted by the forward pass of the model (like \"token_type_ids\" or \"attention_mask\"). Default value is picked from the class attribute of the same name. bos_token (str or tokenizers.AddedToken, optional) \u2014 A special token representing the beginning of a sentence. Will be associated to self.bos_token and self.bos_token_id. eos_token (str or tokenizers.AddedToken, optional) \u2014 A special token representing the",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_64",
        "chunk_index": 64
      }
    },
    {
      "content": "(str or tokenizers.AddedToken, optional) \u2014 A special token representing the end of a sentence. Will be associated to self.eos_token and self.eos_token_id. unk_token (str or tokenizers.AddedToken, optional) \u2014 A special token representing an out-of-vocabulary token. Will be associated to self.unk_token and self.unk_token_id. sep_token (str or tokenizers.AddedToken, optional) \u2014 A special token separating two different sentences in the same input (used by BERT for instance). Will be associated to self.sep_token and self.sep_token_id. pad_token (str or tokenizers.AddedToken, optional) \u2014 A special token used to make arrays of tokens the same size for batching purpose. Will then be ignored by attention mechanisms or loss computation. Will",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_65",
        "chunk_index": 65
      }
    },
    {
      "content": "then be ignored by attention mechanisms or loss computation. Will be associated to self.pad_token and self.pad_token_id. cls_token (str or tokenizers.AddedToken, optional) \u2014 A special token representing the class of the input (used by BERT for instance). Will be associated to self.cls_token and self.cls_token_id. mask_token (str or tokenizers.AddedToken, optional) \u2014 A special token representing a masked token (used by masked-language modeling pretraining objectives, like BERT). Will be associated to self.mask_token and self.mask_token_id. additional_special_tokens (tuple or list of str or tokenizers.AddedToken, optional) \u2014 A tuple or a list of additional special tokens. Add them here to ensure they are skipped when decoding with skip_special_tokens",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_66",
        "chunk_index": 66
      }
    },
    {
      "content": "here to ensure they are skipped when decoding with skip_special_tokens is set to True. If they are not part of the vocabulary, they will be added at the end of the vocabulary. clean_up_tokenization_spaces (bool, optional, defaults to True) \u2014 Whether or not the model should cleanup the spaces that were added when splitting the input text during the tokenization process. split_special_tokens (bool, optional, defaults to False) \u2014 Whether or not the special tokens should be split during the tokenization process. Passing will affect the internal state of the tokenizer. The default behavior is to not split special tokens. This means that if",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_67",
        "chunk_index": 67
      }
    },
    {
      "content": "is to not split special tokens. This means that if <s> is the bos_token, then tokenizer.tokenize(\"<s>\") = ['<s>]. Otherwise, if split_special_tokens=True, then tokenizer.tokenize(\"<s>\") will be give ['<','s', '>']. tokenizer_object (tokenizers.Tokenizer) \u2014 A tokenizers.Tokenizer object from \ud83e\udd17 tokenizers to instantiate from. See Using tokenizers from \ud83e\udd17 tokenizers for more information. tokenizer_file (str) \u2014 A path to a local JSON file representing a previously serialized tokenizers.Tokenizer object from \ud83e\udd17 tokenizers. Base class for all fast tokenizers (wrapping HuggingFace tokenizers library). Inherits from PreTrainedTokenizerBase. Handles all the shared methods for tokenization and special tokens, as well as methods for downloading/caching/loading pretrained tokenizers, as well as",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_68",
        "chunk_index": 68
      }
    },
    {
      "content": "well as methods for downloading/caching/loading pretrained tokenizers, as well as adding tokens to the vocabulary. This class also contains the added tokens in a unified way on top of all tokenizers so we don\u2019t have to handle the specific vocabulary augmentation methods of the various underlying dictionary structures (BPE, sentencepiece\u2026). Class attributes (overridden by derived classes) vocab_files_names (dict[str, str]) \u2014 A dictionary with, as keys, the __init__ keyword name of each vocabulary file required by the model, and as associated values, the filename for saving the associated file (string). pretrained_vocab_files_map (dict[str, dict[str, str]]) \u2014 A dictionary of dictionaries, with the high-level keys",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_69",
        "chunk_index": 69
      }
    },
    {
      "content": "str]]) \u2014 A dictionary of dictionaries, with the high-level keys being the __init__ keyword name of each vocabulary file required by the model, the low-level being the short-cut-names of the pretrained models with, as associated values, the url to the associated pretrained vocabulary file. model_input_names (list[str]) \u2014 A list of inputs expected in the forward pass of the model. padding_side (str) \u2014 The default value for the side on which the model should have padding applied. Should be 'right' or 'left'. truncation_side (str) \u2014 The default value for the side on which the model should have truncation applied. Should be 'right' or",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_70",
        "chunk_index": 70
      }
    },
    {
      "content": "the model should have truncation applied. Should be 'right' or 'left'. __call__ < source > ( text: typing.Union[str, list[str], list[list[str]], NoneType] = None text_pair: typing.Union[str, list[str], list[list[str]], NoneType] = None text_target: typing.Union[str, list[str], list[list[str]], NoneType] = None text_pair_target: typing.Union[str, list[str], list[list[str]], NoneType] = None add_special_tokens: bool = True padding: typing.Union[bool, str, transformers.utils.generic.PaddingStrategy] = False truncation: typing.Union[bool, str, transformers.tokenization_utils_base.TruncationStrategy, NoneType] = None max_length: typing.Optional[int] = None stride: int = 0 is_split_into_words: bool = False pad_to_multiple_of: typing.Optional[int] = None padding_side: typing.Optional[str] = None return_tensors: typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None return_token_type_ids: typing.Optional[bool] = None return_attention_mask: typing.Optional[bool] = None return_overflowing_tokens: bool = False return_special_tokens_mask: bool =",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_71",
        "chunk_index": 71
      }
    },
    {
      "content": "typing.Optional[bool] = None return_overflowing_tokens: bool = False return_special_tokens_mask: bool = False return_offsets_mapping: bool = False return_length: bool = False verbose: bool = True **kwargs ) \u2192 BatchEncoding Parameters text (str, list[str], list[list[str]], optional) \u2014 The sequence or batch of sequences to be encoded. Each sequence can be a string or a list of strings (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set is_split_into_words=True (to lift the ambiguity with a batch of sequences). text_pair (str, list[str], list[list[str]], optional) \u2014 The sequence or batch of sequences to be encoded. Each sequence can be a string or a",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_72",
        "chunk_index": 72
      }
    },
    {
      "content": "be encoded. Each sequence can be a string or a list of strings (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set is_split_into_words=True (to lift the ambiguity with a batch of sequences). text_target (str, list[str], list[list[str]], optional) \u2014 The sequence or batch of sequences to be encoded as target texts. Each sequence can be a string or a list of strings (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set is_split_into_words=True (to lift the ambiguity with a batch of sequences). text_pair_target (str, list[str], list[list[str]], optional) \u2014 The sequence or batch",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_73",
        "chunk_index": 73
      }
    },
    {
      "content": "text_pair_target (str, list[str], list[list[str]], optional) \u2014 The sequence or batch of sequences to be encoded as target texts. Each sequence can be a string or a list of strings (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set is_split_into_words=True (to lift the ambiguity with a batch of sequences). add_special_tokens (bool, optional, defaults to True) \u2014 Whether or not to add special tokens when encoding the sequences. This will use the underlying PretrainedTokenizerBase.build_inputs_with_special_tokens function, which defines which tokens are automatically added to the input ids. This is useful if you want to add bos or eos tokens",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_74",
        "chunk_index": 74
      }
    },
    {
      "content": "useful if you want to add bos or eos tokens automatically. padding (bool, str or PaddingStrategy, optional, defaults to False) \u2014 Activates and controls padding. Accepts the following values: True or 'longest': Pad to the longest sequence in the batch (or no padding if only a single sequence is provided). 'max_length': Pad to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. False or 'do_not_pad' (default): No padding (i.e., can output a batch with sequences of different lengths). truncation (bool, str or TruncationStrategy, optional, defaults to False)",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_75",
        "chunk_index": 75
      }
    },
    {
      "content": "lengths). truncation (bool, str or TruncationStrategy, optional, defaults to False) \u2014 Activates and controls truncation. Accepts the following values: True or 'longest_first': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will truncate token by token, removing a token from the longest sequence in the pair if a pair of sequences (or a batch of pairs) is provided. 'only_first': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_76",
        "chunk_index": 76
      }
    },
    {
      "content": "input length for the model if that argument is not provided. This will only truncate the first sequence of a pair if a pair of sequences (or a batch of pairs) is provided. 'only_second': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will only truncate the second sequence of a pair if a pair of sequences (or a batch of pairs) is provided. False or 'do_not_truncate' (default): No truncation (i.e., can output batch with sequence lengths greater than the model maximum admissible input",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_77",
        "chunk_index": 77
      }
    },
    {
      "content": "with sequence lengths greater than the model maximum admissible input size). max_length (int, optional) \u2014 Controls the maximum length to use by one of the truncation/padding parameters. If left unset or set to None, this will use the predefined model maximum length if a maximum length is required by one of the truncation/padding parameters. If the model has no specific maximum input length (like XLNet) truncation/padding to a maximum length will be deactivated. stride (int, optional, defaults to 0) \u2014 If set to a number along with max_length, the overflowing tokens returned when return_overflowing_tokens=True will contain some tokens from the end of",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_78",
        "chunk_index": 78
      }
    },
    {
      "content": "when return_overflowing_tokens=True will contain some tokens from the end of the truncated sequence returned to provide some overlap between truncated and overflowing sequences. The value of this argument defines the number of overlapping tokens. is_split_into_words (bool, optional, defaults to False) \u2014 Whether or not the input is already pre-tokenized (e.g., split into words). If set to True, the tokenizer assumes the input is already split into words (for instance, by splitting it on whitespace) which it will tokenize. This is useful for NER or token classification. pad_to_multiple_of (int, optional) \u2014 If set will pad the sequence to a multiple of the provided",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_79",
        "chunk_index": 79
      }
    },
    {
      "content": "will pad the sequence to a multiple of the provided value. Requires padding to be activated. This is especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute capability >= 7.5 (Volta). padding_side (str, optional) \u2014 The side on which the model should have padding applied. Should be selected between [\u2018right\u2019, \u2018left\u2019]. Default value is picked from the class attribute of the same name. return_tensors (str or TensorType, optional) \u2014 If set, will return tensors instead of list of python integers. Acceptable values are: 'tf': Return TensorFlow tf.constant objects. 'pt': Return PyTorch torch.Tensor objects. 'np': Return Numpy np.ndarray",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_80",
        "chunk_index": 80
      }
    },
    {
      "content": "objects. 'pt': Return PyTorch torch.Tensor objects. 'np': Return Numpy np.ndarray objects. return_token_type_ids (bool, optional) \u2014 Whether to return token type IDs. If left to the default, will return the token type IDs according to the specific tokenizer\u2019s default, defined by the return_outputs attribute. What are token type IDs? return_attention_mask (bool, optional) \u2014 Whether to return the attention mask. If left to the default, will return the attention mask according to the specific tokenizer\u2019s default, defined by the return_outputs attribute. What are attention masks? return_overflowing_tokens (bool, optional, defaults to False) \u2014 Whether or not to return overflowing token sequences. If a pair of",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_81",
        "chunk_index": 81
      }
    },
    {
      "content": "not to return overflowing token sequences. If a pair of sequences of input ids (or a batch of pairs) is provided with truncation_strategy = longest_first or True, an error is raised instead of returning overflowing tokens. return_special_tokens_mask (bool, optional, defaults to False) \u2014 Whether or not to return special tokens mask information. return_offsets_mapping (bool, optional, defaults to False) \u2014 Whether or not to return (char_start, char_end) for each token. This is only available on fast tokenizers inheriting from PreTrainedTokenizerFast, if using Python\u2019s tokenizer, this method will raise NotImplementedError. return_length (bool, optional, defaults to False) \u2014 Whether or not to return the lengths",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_82",
        "chunk_index": 82
      }
    },
    {
      "content": "to False) \u2014 Whether or not to return the lengths of the encoded inputs. verbose (bool, optional, defaults to True) \u2014 Whether or not to print more information and warnings. **kwargs \u2014 passed to the self.tokenize() method A BatchEncoding with the following fields: input_ids \u2014 List of token ids to be fed to a model. What are input IDs? token_type_ids \u2014 List of token type ids to be fed to a model (when return_token_type_ids=True or if \u201ctoken_type_ids\u201d is in self.model_input_names). What are token type IDs? attention_mask \u2014 List of indices specifying which tokens should be attended to by the model (when return_attention_mask=True",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_83",
        "chunk_index": 83
      }
    },
    {
      "content": "tokens should be attended to by the model (when return_attention_mask=True or if \u201cattention_mask\u201d is in self.model_input_names). What are attention masks? overflowing_tokens \u2014 List of overflowing tokens sequences (when a max_length is specified and return_overflowing_tokens=True). num_truncated_tokens \u2014 Number of tokens truncated (when a max_length is specified and return_overflowing_tokens=True). special_tokens_mask \u2014 List of 0s and 1s, with 1 specifying added special tokens and 0 specifying regular sequence tokens (when add_special_tokens=True and return_special_tokens_mask=True). length \u2014 The length of the inputs (when return_length=True) Main method to tokenize and prepare for the model one or several sequence(s) or one or several pair(s) of sequences. add_tokens < source",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_84",
        "chunk_index": 84
      }
    },
    {
      "content": "or one or several pair(s) of sequences. add_tokens < source > ( new_tokens: typing.Union[str, tokenizers.AddedToken, collections.abc.Sequence[typing.Union[str, tokenizers.AddedToken]]] special_tokens: bool = False ) \u2192 int Parameters new_tokens (str, tokenizers.AddedToken or a sequence of str or tokenizers.AddedToken) \u2014 Tokens are only added if they are not already in the vocabulary. tokenizers.AddedToken wraps a string token to let you personalize its behavior: whether this token should only match against a single word, whether this token should strip all potential whitespaces on the left side, whether this token should strip all potential whitespaces on the right side, etc. special_tokens (bool, optional, defaults to False) \u2014 Can",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_85",
        "chunk_index": 85
      }
    },
    {
      "content": "side, etc. special_tokens (bool, optional, defaults to False) \u2014 Can be used to specify if the token is a special token. This mostly change the normalization behavior (special tokens like CLS or [MASK] are usually not lower-cased for instance). See details for tokenizers.AddedToken in HuggingFace tokenizers library. Number of tokens added to the vocabulary. Add a list of new tokens to the tokenizer class. If the new tokens are not in the vocabulary, they are added to it with indices starting from length of the current vocabulary and will be isolated before the tokenization algorithm is applied. Added tokens and tokens from",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_86",
        "chunk_index": 86
      }
    },
    {
      "content": "the tokenization algorithm is applied. Added tokens and tokens from the vocabulary of the tokenization algorithm are therefore not treated in the same way. Note, when adding new tokens to the vocabulary, you should make sure to also resize the token embedding matrix of the model so that its embedding matrix matches the tokenizer. In order to do that, please use the resize_token_embeddings() method. Examples: tokenizer = BertTokenizerFast.from_pretrained(\"google-bert/bert-base-uncased\") model = BertModel.from_pretrained(\"google-bert/bert-base-uncased\") num_added_toks = tokenizer.add_tokens([\"new_tok1\", \"my_new-tok2\"]) print(\"We have added\", num_added_toks, \"tokens\") model.resize_token_embeddings(len(tokenizer)) add_special_tokens < source > ( special_tokens_dict: dict replace_additional_special_tokens = True ) \u2192 int Parameters special_tokens_dict (dictionary str to str, tokenizers.AddedToken, or",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_87",
        "chunk_index": 87
      }
    },
    {
      "content": "\u2192 int Parameters special_tokens_dict (dictionary str to str, tokenizers.AddedToken, or Sequence[Union[str, AddedToken]]) \u2014 Keys should be in the list of predefined special attributes: [bos_token, eos_token, unk_token, sep_token, pad_token, cls_token, mask_token, additional_special_tokens]. Tokens are only added if they are not already in the vocabulary (tested by checking if the tokenizer assign the index of the unk_token to them). replace_additional_special_tokens (bool, optional,, defaults to True) \u2014 If True, the existing list of additional special tokens will be replaced by the list provided in special_tokens_dict. Otherwise, self._special_tokens_map[\"additional_special_tokens\"] is just extended. In the former case, the tokens will NOT be removed from the tokenizer\u2019s full vocabulary",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_88",
        "chunk_index": 88
      }
    },
    {
      "content": "tokens will NOT be removed from the tokenizer\u2019s full vocabulary - they are only being flagged as non-special tokens. Remember, this only affects which tokens are skipped during decoding, not the added_tokens_encoder and added_tokens_decoder. This means that the previous additional_special_tokens are still added tokens, and will not be split by the model. Number of tokens added to the vocabulary. Add a dictionary of special tokens (eos, pad, cls, etc.) to the encoder and link them to class attributes. If special tokens are NOT in the vocabulary, they are added to it (indexed starting from the last index of the current vocabulary). When",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_89",
        "chunk_index": 89
      }
    },
    {
      "content": "starting from the last index of the current vocabulary). When adding new tokens to the vocabulary, you should make sure to also resize the token embedding matrix of the model so that its embedding matrix matches the tokenizer. In order to do that, please use the resize_token_embeddings() method. Using add_special_tokens will ensure your special tokens can be used in several ways: Special tokens can be skipped when decoding using skip_special_tokens = True. Special tokens are carefully handled by the tokenizer (they are never split), similar to AddedTokens. You can easily refer to special tokens using tokenizer class attributes like tokenizer.cls_token. This makes",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_90",
        "chunk_index": 90
      }
    },
    {
      "content": "special tokens using tokenizer class attributes like tokenizer.cls_token. This makes it easy to develop model-agnostic training and fine-tuning scripts. When possible, special tokens are already registered for provided pretrained models (for instance BertTokenizer cls_token is already registered to be '[CLS]' and XLM\u2019s one is also registered to be '</s>'). Examples: tokenizer = GPT2Tokenizer.from_pretrained(\"openai-community/gpt2\") model = GPT2Model.from_pretrained(\"openai-community/gpt2\") special_tokens_dict = {\"cls_token\": \"<CLS>\"} num_added_toks = tokenizer.add_special_tokens(special_tokens_dict) print(\"We have added\", num_added_toks, \"tokens\") model.resize_token_embeddings(len(tokenizer)) assert tokenizer.cls_token == \"<CLS>\" apply_chat_template < source > ( conversation: typing.Union[list[dict[str, str]], list[list[dict[str, str]]]] tools: typing.Optional[list[typing.Union[dict, typing.Callable]]] = None documents: typing.Optional[list[dict[str, str]]] = None chat_template: typing.Optional[str] = None add_generation_prompt: bool = False continue_final_message:",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_91",
        "chunk_index": 91
      }
    },
    {
      "content": "None chat_template: typing.Optional[str] = None add_generation_prompt: bool = False continue_final_message: bool = False tokenize: bool = True padding: typing.Union[bool, str, transformers.utils.generic.PaddingStrategy] = False truncation: bool = False max_length: typing.Optional[int] = None return_tensors: typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None return_dict: bool = False return_assistant_tokens_mask: bool = False tokenizer_kwargs: typing.Optional[dict[str, typing.Any]] = None **kwargs ) \u2192 Union[list[int], Dict] Parameters conversation (Union[list[dict[str, str]], list[list[dict[str, str]]]]) \u2014 A list of dicts with \u201crole\u201d and \u201ccontent\u201d keys, representing the chat history so far. tools (list[Union[Dict, Callable]], optional) \u2014 A list of tools (callable functions) that will be accessible to the model. If the template does not support function",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_92",
        "chunk_index": 92
      }
    },
    {
      "content": "to the model. If the template does not support function calling, this argument will have no effect. Each tool should be passed as a JSON Schema, giving the name, description and argument types for the tool. See our tool use guide for more information. documents (list[dict[str, str]], optional) \u2014 A list of dicts representing documents that will be accessible to the model if it is performing RAG (retrieval-augmented generation). If the template does not support RAG, this argument will have no effect. We recommend that each document should be a dict containing \u201ctitle\u201d and \u201ctext\u201d keys. chat_template (str, optional) \u2014 A Jinja",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_93",
        "chunk_index": 93
      }
    },
    {
      "content": "\u201ctitle\u201d and \u201ctext\u201d keys. chat_template (str, optional) \u2014 A Jinja template to use for this conversion. It is usually not necessary to pass anything to this argument, as the model\u2019s template will be used by default. add_generation_prompt (bool, optional) \u2014 If this is set, a prompt with the token(s) that indicate the start of an assistant message will be appended to the formatted output. This is useful when you want to generate a response from the model. Note that this argument will be passed to the chat template, and so it must be supported in the template for this argument to have",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_94",
        "chunk_index": 94
      }
    },
    {
      "content": "be supported in the template for this argument to have any effect. continue_final_message (bool, optional) \u2014 If this is set, the chat will be formatted so that the final message in the chat is open-ended, without any EOS tokens. The model will continue this message rather than starting a new one. This allows you to \u201cprefill\u201d part of the model\u2019s response for it. Cannot be used at the same time as add_generation_prompt. tokenize (bool, defaults to True) \u2014 Whether to tokenize the output. If False, the output will be a string. padding (bool, str or PaddingStrategy, optional, defaults to False) \u2014 Select",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_95",
        "chunk_index": 95
      }
    },
    {
      "content": "(bool, str or PaddingStrategy, optional, defaults to False) \u2014 Select a strategy to pad the returned sequences (according to the model\u2019s padding side and padding index) among: True or 'longest': Pad to the longest sequence in the batch (or no padding if only a single sequence if provided). 'max_length': Pad to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. False or 'do_not_pad' (default): No padding (i.e., can output a batch with sequences of different lengths). truncation (bool, defaults to False) \u2014 Whether to truncate sequences at",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_96",
        "chunk_index": 96
      }
    },
    {
      "content": "(bool, defaults to False) \u2014 Whether to truncate sequences at the maximum length. Has no effect if tokenize is False. max_length (int, optional) \u2014 Maximum length (in tokens) to use for padding or truncation. Has no effect if tokenize is False. If not specified, the tokenizer\u2019s max_length attribute will be used as a default. return_tensors (str or TensorType, optional) \u2014 If set, will return tensors of a particular framework. Has no effect if tokenize is False. Acceptable values are: 'tf': Return TensorFlow tf.Tensor objects. 'pt': Return PyTorch torch.Tensor objects. 'np': Return NumPy np.ndarray objects. 'jax': Return JAX jnp.ndarray objects. return_dict (bool, defaults",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_97",
        "chunk_index": 97
      }
    },
    {
      "content": "np.ndarray objects. 'jax': Return JAX jnp.ndarray objects. return_dict (bool, defaults to False) \u2014 Whether to return a dictionary with named outputs. Has no effect if tokenize is False. tokenizer_kwargs (dict[str -- Any], optional): Additional kwargs to pass to the tokenizer. return_assistant_tokens_mask (bool, defaults to False) \u2014 Whether to return a mask of the assistant generated tokens. For tokens generated by the assistant, the mask will contain 1. For user and system tokens, the mask will contain 0. This functionality is only available for chat templates that support it via the {% generation %} keyword. **kwargs \u2014 Additional kwargs to pass to the",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_98",
        "chunk_index": 98
      }
    },
    {
      "content": "%} keyword. **kwargs \u2014 Additional kwargs to pass to the template renderer. Will be accessible by the chat template. Returns Union[list[int], Dict] A list of token ids representing the tokenized chat so far, including control tokens. This output is ready to pass to the model, either directly or via methods like generate(). If return_dict is set, will return a dict of tokenizer outputs instead. Converts a list of dictionaries with \"role\" and \"content\" keys to a list of token ids. This method is intended for use with chat models, and will read the tokenizer\u2019s chat_template attribute to determine the format and control",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_99",
        "chunk_index": 99
      }
    },
    {
      "content": "the tokenizer\u2019s chat_template attribute to determine the format and control tokens to use when converting. batch_decode < source > ( sequences: typing.Union[list[int], list[list[int]], ForwardRef('np.ndarray'), ForwardRef('torch.Tensor'), ForwardRef('tf.Tensor')] skip_special_tokens: bool = False clean_up_tokenization_spaces: typing.Optional[bool] = None **kwargs ) \u2192 list[str] Parameters sequences (Union[list[int], list[list[int]], np.ndarray, torch.Tensor, tf.Tensor]) \u2014 List of tokenized input ids. Can be obtained using the __call__ method. skip_special_tokens (bool, optional, defaults to False) \u2014 Whether or not to remove special tokens in the decoding. clean_up_tokenization_spaces (bool, optional) \u2014 Whether or not to clean up the tokenization spaces. If None, will default to self.clean_up_tokenization_spaces. kwargs (additional keyword arguments, optional) \u2014 Will be",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_100",
        "chunk_index": 100
      }
    },
    {
      "content": "to self.clean_up_tokenization_spaces. kwargs (additional keyword arguments, optional) \u2014 Will be passed to the underlying model specific decode method. The list of decoded sentences. Convert a list of lists of token ids into a list of strings by calling decode. decode < source > ( token_ids: typing.Union[int, list[int], numpy.ndarray, ForwardRef('torch.Tensor')] skip_special_tokens: bool = False clean_up_tokenization_spaces: typing.Optional[bool] = None **kwargs ) \u2192 str Parameters token_ids (Union[int, list[int], np.ndarray, torch.Tensor, tf.Tensor]) \u2014 List of tokenized input ids. Can be obtained using the __call__ method. skip_special_tokens (bool, optional, defaults to False) \u2014 Whether or not to remove special tokens in the decoding. clean_up_tokenization_spaces (bool, optional) \u2014",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_101",
        "chunk_index": 101
      }
    },
    {
      "content": "remove special tokens in the decoding. clean_up_tokenization_spaces (bool, optional) \u2014 Whether or not to clean up the tokenization spaces. If None, will default to self.clean_up_tokenization_spaces. kwargs (additional keyword arguments, optional) \u2014 Will be passed to the underlying model specific decode method. The decoded sentence. Converts a sequence of ids in a string, using the tokenizer and vocabulary with options to remove special tokens and clean up tokenization spaces. Similar to doing self.convert_tokens_to_string(self.convert_ids_to_tokens(token_ids)). encode < source > ( text: typing.Union[str, list[str], list[int]] text_pair: typing.Union[str, list[str], list[int], NoneType] = None add_special_tokens: bool = True padding: typing.Union[bool, str, transformers.utils.generic.PaddingStrategy] = False truncation: typing.Union[bool, str, transformers.tokenization_utils_base.TruncationStrategy,",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_102",
        "chunk_index": 102
      }
    },
    {
      "content": "padding: typing.Union[bool, str, transformers.utils.generic.PaddingStrategy] = False truncation: typing.Union[bool, str, transformers.tokenization_utils_base.TruncationStrategy, NoneType] = None max_length: typing.Optional[int] = None stride: int = 0 padding_side: typing.Optional[str] = None return_tensors: typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None **kwargs ) \u2192 list[int], torch.Tensor, tf.Tensor or np.ndarray Parameters text (str, list[str] or list[int]) \u2014 The first sequence to be encoded. This can be a string, a list of strings (tokenized string using the tokenize method) or a list of integers (tokenized string ids using the convert_tokens_to_ids method). text_pair (str, list[str] or list[int], optional) \u2014 Optional second sequence to be encoded. This can be a string, a list of strings (tokenized",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_103",
        "chunk_index": 103
      }
    },
    {
      "content": "This can be a string, a list of strings (tokenized string using the tokenize method) or a list of integers (tokenized string ids using the convert_tokens_to_ids method). add_special_tokens (bool, optional, defaults to True) \u2014 Whether or not to add special tokens when encoding the sequences. This will use the underlying PretrainedTokenizerBase.build_inputs_with_special_tokens function, which defines which tokens are automatically added to the input ids. This is useful if you want to add bos or eos tokens automatically. padding (bool, str or PaddingStrategy, optional, defaults to False) \u2014 Activates and controls padding. Accepts the following values: True or 'longest': Pad to the longest sequence",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_104",
        "chunk_index": 104
      }
    },
    {
      "content": "following values: True or 'longest': Pad to the longest sequence in the batch (or no padding if only a single sequence is provided). 'max_length': Pad to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. False or 'do_not_pad' (default): No padding (i.e., can output a batch with sequences of different lengths). truncation (bool, str or TruncationStrategy, optional, defaults to False) \u2014 Activates and controls truncation. Accepts the following values: True or 'longest_first': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_105",
        "chunk_index": 105
      }
    },
    {
      "content": "specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will truncate token by token, removing a token from the longest sequence in the pair if a pair of sequences (or a batch of pairs) is provided. 'only_first': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will only truncate the first sequence of a pair if a pair of sequences (or a batch of pairs) is provided. 'only_second': Truncate to a",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_106",
        "chunk_index": 106
      }
    },
    {
      "content": "a batch of pairs) is provided. 'only_second': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will only truncate the second sequence of a pair if a pair of sequences (or a batch of pairs) is provided. False or 'do_not_truncate' (default): No truncation (i.e., can output batch with sequence lengths greater than the model maximum admissible input size). max_length (int, optional) \u2014 Controls the maximum length to use by one of the truncation/padding parameters. If left unset or set to None, this will use",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_107",
        "chunk_index": 107
      }
    },
    {
      "content": "If left unset or set to None, this will use the predefined model maximum length if a maximum length is required by one of the truncation/padding parameters. If the model has no specific maximum input length (like XLNet) truncation/padding to a maximum length will be deactivated. stride (int, optional, defaults to 0) \u2014 If set to a number along with max_length, the overflowing tokens returned when return_overflowing_tokens=True will contain some tokens from the end of the truncated sequence returned to provide some overlap between truncated and overflowing sequences. The value of this argument defines the number of overlapping tokens. is_split_into_words (bool, optional,",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_108",
        "chunk_index": 108
      }
    },
    {
      "content": "argument defines the number of overlapping tokens. is_split_into_words (bool, optional, defaults to False) \u2014 Whether or not the input is already pre-tokenized (e.g., split into words). If set to True, the tokenizer assumes the input is already split into words (for instance, by splitting it on whitespace) which it will tokenize. This is useful for NER or token classification. pad_to_multiple_of (int, optional) \u2014 If set will pad the sequence to a multiple of the provided value. Requires padding to be activated. This is especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute capability >= 7.5 (Volta). padding_side",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_109",
        "chunk_index": 109
      }
    },
    {
      "content": "on NVIDIA hardware with compute capability >= 7.5 (Volta). padding_side (str, optional) \u2014 The side on which the model should have padding applied. Should be selected between [\u2018right\u2019, \u2018left\u2019]. Default value is picked from the class attribute of the same name. return_tensors (str or TensorType, optional) \u2014 If set, will return tensors instead of list of python integers. Acceptable values are: 'tf': Return TensorFlow tf.constant objects. 'pt': Return PyTorch torch.Tensor objects. 'np': Return Numpy np.ndarray objects. **kwargs \u2014 Passed along to the .tokenize() method. Returns list[int], torch.Tensor, tf.Tensor or np.ndarray The tokenized ids of the text. Converts a string to a sequence",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_110",
        "chunk_index": 110
      }
    },
    {
      "content": "ids of the text. Converts a string to a sequence of ids (integer), using the tokenizer and vocabulary. Same as doing self.convert_tokens_to_ids(self.tokenize(text)). push_to_hub < source > ( repo_id: str use_temp_dir: typing.Optional[bool] = None commit_message: typing.Optional[str] = None private: typing.Optional[bool] = None token: typing.Union[bool, str, NoneType] = None max_shard_size: typing.Union[str, int, NoneType] = '5GB' create_pr: bool = False safe_serialization: bool = True revision: typing.Optional[str] = None commit_description: typing.Optional[str] = None tags: typing.Optional[list[str]] = None **deprecated_kwargs ) Parameters repo_id (str) \u2014 The name of the repository you want to push your tokenizer to. It should contain your organization name when pushing to a given",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_111",
        "chunk_index": 111
      }
    },
    {
      "content": "should contain your organization name when pushing to a given organization. use_temp_dir (bool, optional) \u2014 Whether or not to use a temporary directory to store the files saved before they are pushed to the Hub. Will default to True if there is no directory named like repo_id, False otherwise. commit_message (str, optional) \u2014 Message to commit while pushing. Will default to \"Upload tokenizer\". private (bool, optional) \u2014 Whether to make the repo private. If None (default), the repo will be public unless the organization\u2019s default is private. This value is ignored if the repo already exists. token (bool or str, optional) \u2014",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_112",
        "chunk_index": 112
      }
    },
    {
      "content": "the repo already exists. token (bool or str, optional) \u2014 The token to use as HTTP bearer authorization for remote files. If True, will use the token generated when running hf auth login (stored in ~/.huggingface). Will default to True if repo_url is not specified. max_shard_size (int or str, optional, defaults to \"5GB\") \u2014 Only applicable for models. The maximum size for a checkpoint before being sharded. Checkpoints shard will then be each of size lower than this size. If expressed as a string, needs to be digits followed by a unit (like \"5MB\"). We default it to \"5GB\" so that users",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_113",
        "chunk_index": 113
      }
    },
    {
      "content": "(like \"5MB\"). We default it to \"5GB\" so that users can easily load models on free-tier Google Colab instances without any CPU OOM issues. create_pr (bool, optional, defaults to False) \u2014 Whether or not to create a PR with the uploaded files or directly commit. safe_serialization (bool, optional, defaults to True) \u2014 Whether or not to convert the model weights in safetensors format for safer serialization. revision (str, optional) \u2014 Branch to push the uploaded files to. commit_description (str, optional) \u2014 The description of the commit that will be created tags (list[str], optional) \u2014 List of tags to push on the Hub.",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_114",
        "chunk_index": 114
      }
    },
    {
      "content": "optional) \u2014 List of tags to push on the Hub. Upload the tokenizer files to the \ud83e\udd17 Model Hub. Examples: from transformers import AutoTokenizer tokenizer = AutoTokenizer.from_pretrained(\"google-bert/bert-base-cased\") tokenizer.push_to_hub(\"my-finetuned-bert\") tokenizer.push_to_hub(\"huggingface/my-finetuned-bert\") convert_ids_to_tokens < source > ( ids: typing.Union[int, list[int]] skip_special_tokens: bool = False ) \u2192 str or list[str] Parameters ids (int or list[int]) \u2014 The token id (or token ids) to convert to tokens. skip_special_tokens (bool, optional, defaults to False) \u2014 Whether or not to remove special tokens in the decoding. The decoded token(s). Converts a single index or a sequence of indices in a token or a sequence of tokens, using the vocabulary",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_115",
        "chunk_index": 115
      }
    },
    {
      "content": "a token or a sequence of tokens, using the vocabulary and added tokens. convert_tokens_to_ids < source > ( tokens: typing.Union[str, collections.abc.Iterable[str]] ) \u2192 int or list[int] Parameters tokens (str or Iterable[str]) \u2014 One or several token(s) to convert to token id(s). The token id or list of token ids. Converts a token string (or a sequence of tokens) in a single integer id (or a Iterable of ids), using the vocabulary. Returns the added tokens in the vocabulary as a dictionary of token to index. num_special_tokens_to_add < source > ( pair: bool = False ) \u2192 int Parameters pair (bool, optional, defaults",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_116",
        "chunk_index": 116
      }
    },
    {
      "content": "= False ) \u2192 int Parameters pair (bool, optional, defaults to False) \u2014 Whether the number of added tokens should be computed in the case of a sequence pair or a single sequence. Number of special tokens added to sequences. Returns the number of added tokens when encoding a sequence with special tokens. This encodes a dummy input and checks the number of added tokens, and is therefore not efficient. Do not put this inside your training loop. set_truncation_and_padding < source > ( padding_strategy: PaddingStrategy truncation_strategy: TruncationStrategy max_length: int stride: int pad_to_multiple_of: typing.Optional[int] padding_side: typing.Optional[str] ) Parameters padding_strategy (PaddingStrategy) \u2014 The kind",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_117",
        "chunk_index": 117
      }
    },
    {
      "content": "typing.Optional[int] padding_side: typing.Optional[str] ) Parameters padding_strategy (PaddingStrategy) \u2014 The kind of padding that will be applied to the input truncation_strategy (TruncationStrategy) \u2014 The kind of truncation that will be applied to the input max_length (int) \u2014 The maximum size of a sequence. stride (int) \u2014 The stride to use when handling overflow. pad_to_multiple_of (int, optional) \u2014 If set will pad the sequence to a multiple of the provided value. This is especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute capability >= 7.5 (Volta). padding_side (str, optional) \u2014 The side on which the model should have padding",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_118",
        "chunk_index": 118
      }
    },
    {
      "content": "\u2014 The side on which the model should have padding applied. Should be selected between [\u2018right\u2019, \u2018left\u2019]. Default value is picked from the class attribute of the same name. Define the truncation and the padding strategies for fast tokenizers (provided by HuggingFace tokenizers library) and restore the tokenizer settings afterwards. The provided tokenizer has no padding / truncation strategy before the managed section. If your tokenizer set a padding / truncation strategy before, then it will be reset to no padding / truncation when exiting the managed section. train_new_from_iterator < source > ( text_iterator vocab_size length = None new_special_tokens = None special_tokens_map",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_119",
        "chunk_index": 119
      }
    },
    {
      "content": "( text_iterator vocab_size length = None new_special_tokens = None special_tokens_map = None **kwargs ) \u2192 PreTrainedTokenizerFast Parameters text_iterator (generator of list[str]) \u2014 The training corpus. Should be a generator of batches of texts, for instance a list of lists of texts if you have everything in memory. vocab_size (int) \u2014 The size of the vocabulary you want for your tokenizer. length (int, optional) \u2014 The total number of sequences in the iterator. This is used to provide meaningful progress tracking new_special_tokens (list of str or AddedToken, optional) \u2014 A list of new special tokens to add to the tokenizer you are training.",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_120",
        "chunk_index": 120
      }
    },
    {
      "content": "special tokens to add to the tokenizer you are training. special_tokens_map (dict[str, str], optional) \u2014 If you want to rename some of the special tokens this tokenizer uses, pass along a mapping old special token name to new special token name in this argument. kwargs (dict[str, Any], optional) \u2014 Additional keyword arguments passed along to the trainer from the \ud83e\udd17 Tokenizers library. A new tokenizer of the same type as the original one, trained on text_iterator. Trains a tokenizer on a new corpus with the same defaults (in terms of special tokens or tokenization pipeline) as the current one. BatchEncoding class transformers.BatchEncoding",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_121",
        "chunk_index": 121
      }
    },
    {
      "content": "or tokenization pipeline) as the current one. BatchEncoding class transformers.BatchEncoding < source > ( data: typing.Optional[dict[str, typing.Any]] = None encoding: typing.Union[tokenizers.Encoding, collections.abc.Sequence[tokenizers.Encoding], NoneType] = None tensor_type: typing.Union[NoneType, str, transformers.utils.generic.TensorType] = None prepend_batch_axis: bool = False n_sequences: typing.Optional[int] = None ) Parameters data (dict, optional) \u2014 Dictionary of lists/arrays/tensors returned by the __call__/encode_plus/batch_encode_plus methods (\u2018input_ids\u2019, \u2018attention_mask\u2019, etc.). encoding (tokenizers.Encoding or Sequence[tokenizers.Encoding], optional) \u2014 If the tokenizer is a fast tokenizer which outputs additional information like mapping from word/character space to token space the tokenizers.Encoding instance or list of instance (for batches) hold this information. tensor_type (Union[None, str, TensorType], optional) \u2014 You can give",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_122",
        "chunk_index": 122
      }
    },
    {
      "content": "information. tensor_type (Union[None, str, TensorType], optional) \u2014 You can give a tensor_type here to convert the lists of integers in PyTorch/TensorFlow/Numpy Tensors at initialization. prepend_batch_axis (bool, optional, defaults to False) \u2014 Whether or not to add a batch axis when converting to tensors (see tensor_type above). Note that this parameter has an effect if the parameter tensor_type is set, otherwise has no effect. n_sequences (Optional[int], optional) \u2014 You can give a tensor_type here to convert the lists of integers in PyTorch/TensorFlow/Numpy Tensors at initialization. Holds the output of the call(), encode_plus() and batch_encode_plus() methods (tokens, attention_masks, etc). This class is derived from",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_123",
        "chunk_index": 123
      }
    },
    {
      "content": "batch_encode_plus() methods (tokens, attention_masks, etc). This class is derived from a python dictionary and can be used as a dictionary. In addition, this class exposes utility methods to map from word/character space to token space. char_to_token < source > ( batch_or_char_index: int char_index: typing.Optional[int] = None sequence_index: int = 0 ) \u2192 int Parameters batch_or_char_index (int) \u2014 Index of the sequence in the batch. If the batch only comprise one sequence, this can be the index of the word in the sequence char_index (int, optional) \u2014 If a batch index is provided in batch_or_token_index, this can be the index of the word",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_124",
        "chunk_index": 124
      }
    },
    {
      "content": "in batch_or_token_index, this can be the index of the word in the sequence. sequence_index (int, optional, defaults to 0) \u2014 If pair of sequences are encoded in the batch this can be used to specify which sequence in the pair (0 or 1) the provided character index belongs to. Index of the token, or None if the char index refers to a whitespace only token and whitespace is trimmed with trim_offsets=True. Get the index of the token in the encoded output comprising a character in the original string for a sequence of the batch. Can be called as: self.char_to_token(char_index) if batch size",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_125",
        "chunk_index": 125
      }
    },
    {
      "content": "the batch. Can be called as: self.char_to_token(char_index) if batch size is 1 self.char_to_token(batch_index, char_index) if batch size is greater or equal to 1 This method is particularly suited when the input sequences are provided as pre-tokenized sequences (i.e. words are defined by the user). In this case it allows to easily associate encoded tokens with provided tokenized words. char_to_word < source > ( batch_or_char_index: int char_index: typing.Optional[int] = None sequence_index: int = 0 ) \u2192 int or list[int] Parameters batch_or_char_index (int) \u2014 Index of the sequence in the batch. If the batch only comprise one sequence, this can be the index of",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_126",
        "chunk_index": 126
      }
    },
    {
      "content": "only comprise one sequence, this can be the index of the character in the original string. char_index (int, optional) \u2014 If a batch index is provided in batch_or_token_index, this can be the index of the character in the original string. sequence_index (int, optional, defaults to 0) \u2014 If pair of sequences are encoded in the batch this can be used to specify which sequence in the pair (0 or 1) the provided character index belongs to. Index or indices of the associated encoded token(s). Get the word in the original string corresponding to a character in the original string of a sequence",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_127",
        "chunk_index": 127
      }
    },
    {
      "content": "to a character in the original string of a sequence of the batch. Can be called as: self.char_to_word(char_index) if batch size is 1 self.char_to_word(batch_index, char_index) if batch size is greater than 1 This method is particularly suited when the input sequences are provided as pre-tokenized sequences (i.e. words are defined by the user). In this case it allows to easily associate encoded tokens with provided tokenized words. convert_to_tensors < source > ( tensor_type: typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None prepend_batch_axis: bool = False ) Parameters tensor_type (str or TensorType, optional) \u2014 The type of tensors to use. If str, should be one of",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_128",
        "chunk_index": 128
      }
    },
    {
      "content": "of tensors to use. If str, should be one of the values of the enum TensorType. If None, no modification is done. prepend_batch_axis (int, optional, defaults to False) \u2014 Whether or not to add the batch dimension during the conversion. Convert the inner content to tensors. sequence_ids < source > ( batch_index: int = 0 ) \u2192 list[Optional[int]] Parameters batch_index (int, optional, defaults to 0) \u2014 The index to access in the batch. Returns list[Optional[int]] A list indicating the sequence id corresponding to each token. Special tokens added by the tokenizer are mapped to None and other tokens are mapped to the",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_129",
        "chunk_index": 129
      }
    },
    {
      "content": "mapped to None and other tokens are mapped to the index of their corresponding sequence. Return a list mapping the tokens to the id of their original sentences: None for special tokens added around or between sequences, 0 for tokens corresponding to words in the first sequence, 1 for tokens corresponding to words in the second sequence when a pair of sequences was jointly encoded. to < source > ( device: typing.Union[str, ForwardRef('torch.device')] non_blocking: bool = False ) \u2192 BatchEncoding Parameters device (str or torch.device) \u2014 The device to put the tensors on. non_blocking (bool) \u2014 Whether to perform the copy asynchronously.",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_130",
        "chunk_index": 130
      }
    },
    {
      "content": "on. non_blocking (bool) \u2014 Whether to perform the copy asynchronously. The same instance after modification. Send all values to device by calling v.to(device, non_blocking=non_blocking) (PyTorch only). token_to_chars < source > ( batch_or_token_index: int token_index: typing.Optional[int] = None ) \u2192 CharSpan Parameters batch_or_token_index (int) \u2014 Index of the sequence in the batch. If the batch only comprise one sequence, this can be the index of the token in the sequence. token_index (int, optional) \u2014 If a batch index is provided in batch_or_token_index, this can be the index of the token or tokens in the sequence. Span of characters in the original string, or",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_131",
        "chunk_index": 131
      }
    },
    {
      "content": "the sequence. Span of characters in the original string, or None, if the token (e.g. , ) doesn\u2019t correspond to any chars in the origin string. Get the character span corresponding to an encoded token in a sequence of the batch. Character spans are returned as a CharSpan with: start \u2014 Index of the first character in the original string associated to the token. end \u2014 Index of the character following the last character in the original string associated to the token. Can be called as: self.token_to_chars(token_index) if batch size is 1 self.token_to_chars(batch_index, token_index) if batch size is greater or equal to",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_132",
        "chunk_index": 132
      }
    },
    {
      "content": "self.token_to_chars(batch_index, token_index) if batch size is greater or equal to 1 token_to_sequence < source > ( batch_or_token_index: int token_index: typing.Optional[int] = None ) \u2192 int Parameters batch_or_token_index (int) \u2014 Index of the sequence in the batch. If the batch only comprises one sequence, this can be the index of the token in the sequence. token_index (int, optional) \u2014 If a batch index is provided in batch_or_token_index, this can be the index of the token in the sequence. Index of the word in the input sequence. Get the index of the sequence represented by the given token. In the general use case, this",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_133",
        "chunk_index": 133
      }
    },
    {
      "content": "by the given token. In the general use case, this method returns 0 for a single sequence or the first sequence of a pair, and 1 for the second sequence of a pair Can be called as: self.token_to_sequence(token_index) if batch size is 1 self.token_to_sequence(batch_index, token_index) if batch size is greater than 1 This method is particularly suited when the input sequences are provided as pre-tokenized sequences (i.e., words are defined by the user). In this case it allows to easily associate encoded tokens with provided tokenized words. token_to_word < source > ( batch_or_token_index: int token_index: typing.Optional[int] = None ) \u2192 int Parameters",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_134",
        "chunk_index": 134
      }
    },
    {
      "content": "batch_or_token_index: int token_index: typing.Optional[int] = None ) \u2192 int Parameters batch_or_token_index (int) \u2014 Index of the sequence in the batch. If the batch only comprise one sequence, this can be the index of the token in the sequence. token_index (int, optional) \u2014 If a batch index is provided in batch_or_token_index, this can be the index of the token in the sequence. Index of the word in the input sequence. Get the index of the word corresponding (i.e. comprising) to an encoded token in a sequence of the batch. Can be called as: self.token_to_word(token_index) if batch size is 1 self.token_to_word(batch_index, token_index) if batch",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_135",
        "chunk_index": 135
      }
    },
    {
      "content": "self.token_to_word(token_index) if batch size is 1 self.token_to_word(batch_index, token_index) if batch size is greater than 1 This method is particularly suited when the input sequences are provided as pre-tokenized sequences (i.e., words are defined by the user). In this case it allows to easily associate encoded tokens with provided tokenized words. tokens < source > ( batch_index: int = 0 ) \u2192 list[str] Parameters batch_index (int, optional, defaults to 0) \u2014 The index to access in the batch. The list of tokens at that index. Return the list of tokens (sub-parts of the input strings after word/subword splitting and before conversion to integer",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_136",
        "chunk_index": 136
      }
    },
    {
      "content": "input strings after word/subword splitting and before conversion to integer indices) at a given batch index (only works for the output of a fast tokenizer). word_ids < source > ( batch_index: int = 0 ) \u2192 list[Optional[int]] Parameters batch_index (int, optional, defaults to 0) \u2014 The index to access in the batch. Returns list[Optional[int]] A list indicating the word corresponding to each token. Special tokens added by the tokenizer are mapped to None and other tokens are mapped to the index of their corresponding word (several tokens will be mapped to the same word index if they are parts of that word).",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_137",
        "chunk_index": 137
      }
    },
    {
      "content": "same word index if they are parts of that word). Return a list mapping the tokens to their actual word in the initial sentence for a fast tokenizer. word_to_chars < source > ( batch_or_word_index: int word_index: typing.Optional[int] = None sequence_index: int = 0 ) \u2192 CharSpan or list[CharSpan] Parameters batch_or_word_index (int) \u2014 Index of the sequence in the batch. If the batch only comprise one sequence, this can be the index of the word in the sequence word_index (int, optional) \u2014 If a batch index is provided in batch_or_token_index, this can be the index of the word in the sequence. sequence_index (int,",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_138",
        "chunk_index": 138
      }
    },
    {
      "content": "the index of the word in the sequence. sequence_index (int, optional, defaults to 0) \u2014 If pair of sequences are encoded in the batch this can be used to specify which sequence in the pair (0 or 1) the provided word index belongs to. Returns CharSpan or list[CharSpan] Span(s) of the associated character or characters in the string. CharSpan are NamedTuple with: start: index of the first character associated to the token in the original string end: index of the character following the last character associated to the token in the original string Get the character span in the original string corresponding",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_139",
        "chunk_index": 139
      }
    },
    {
      "content": "string Get the character span in the original string corresponding to given word in a sequence of the batch. Character spans are returned as a CharSpan NamedTuple with: start: index of the first character in the original string end: index of the character following the last character in the original string Can be called as: self.word_to_chars(word_index) if batch size is 1 self.word_to_chars(batch_index, word_index) if batch size is greater or equal to 1 word_to_tokens < source > ( batch_or_word_index: int word_index: typing.Optional[int] = None sequence_index: int = 0 ) \u2192 (TokenSpan, optional) Parameters batch_or_word_index (int) \u2014 Index of the sequence in the batch.",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_140",
        "chunk_index": 140
      }
    },
    {
      "content": "batch_or_word_index (int) \u2014 Index of the sequence in the batch. If the batch only comprises one sequence, this can be the index of the word in the sequence. word_index (int, optional) \u2014 If a batch index is provided in batch_or_token_index, this can be the index of the word in the sequence. sequence_index (int, optional, defaults to 0) \u2014 If pair of sequences are encoded in the batch this can be used to specify which sequence in the pair (0 or 1) the provided word index belongs to. Returns (TokenSpan, optional) Span of tokens in the encoded sequence. Returns None if no tokens",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_141",
        "chunk_index": 141
      }
    },
    {
      "content": "tokens in the encoded sequence. Returns None if no tokens correspond to the word. This can happen especially when the token is a special token that has been used to format the tokenization. For example when we add a class token at the very beginning of the tokenization. Get the encoded token span corresponding to a word in a sequence of the batch. Token spans are returned as a TokenSpan with: start \u2014 Index of the first token. end \u2014 Index of the token following the last token. Can be called as: self.word_to_tokens(word_index, sequence_index: int = 0) if batch size is 1",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_142",
        "chunk_index": 142
      }
    },
    {
      "content": "self.word_to_tokens(word_index, sequence_index: int = 0) if batch size is 1 self.word_to_tokens(batch_index, word_index, sequence_index: int = 0) if batch size is greater or equal to 1 This method is particularly suited when the input sequences are provided as pre-tokenized sequences (i.e. words are defined by the user). In this case it allows to easily associate encoded tokens with provided tokenized words. words < source > ( batch_index: int = 0 ) \u2192 list[Optional[int]] Parameters batch_index (int, optional, defaults to 0) \u2014 The index to access in the batch. Returns list[Optional[int]] A list indicating the word corresponding to each token. Special tokens added by",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_143",
        "chunk_index": 143
      }
    },
    {
      "content": "the word corresponding to each token. Special tokens added by the tokenizer are mapped to None and other tokens are mapped to the index of their corresponding word (several tokens will be mapped to the same word index if they are parts of that word). Return a list mapping the tokens to their actual word in the initial sentence for a fast tokenizer. Update on GitHub",
      "metadata": {
        "source": "https://huggingface.co/docs/transformers/main_classes/tokenizer",
        "doc_id": "huggingface.co_docs_transformers_main_classes_tokenizer",
        "category": "nlp",
        "chunk_id": "huggingface.co_docs_transformers_main_classes_tokenizer_chunk_144",
        "chunk_index": 144
      }
    }
  ]
}