{
  "doc_id": "www.mongodb.com_docs_manual_core_aggregation_pipeline",
  "chunks": [
    {
      "content": "An aggregation pipeline consists of one or more stages that process documents. These documents can come from a collection, a view, or a specially designed stage.Each stage performs an operation on the input documents. For example, a stage can $filter documents, $group documents, and calculate values. The documents that a stage outputs are then passed to the next stage in the pipeline.An aggregation pipeline can return results for groups of documents. You can also update documents with an aggregation pipeline using the stages shown in Updates with Aggregation Pipeline.When you run aggregation pipelines on MongoDB Atlas deployments in the MongoDB Atlas UI,",
      "metadata": {
        "source": "https://www.mongodb.com/docs/manual/core/aggregation-pipeline/",
        "doc_id": "www.mongodb.com_docs_manual_core_aggregation_pipeline",
        "category": "databases",
        "chunk_id": "www.mongodb.com_docs_manual_core_aggregation_pipeline_chunk_0",
        "chunk_index": 0
      }
    },
    {
      "content": "pipelines on MongoDB Atlas deployments in the MongoDB Atlas UI, you can preview the results at each stage.An aggregation pipeline consists of one or more stages that process documents:A stage does not have to output one document for every input document. For example, some stages may produce new documents or filter out documents.The same stage can appear multiple times in the pipeline with these stage exceptions: $out, $merge, and $geoNear.For all aggregation stages, see Aggregation Stages.Some aggregation pipeline stages accept expressions. Operators calculate values based on input expressions.In the MongoDB Query Language, you can build expressions from the following components:For example, {",
      "metadata": {
        "source": "https://www.mongodb.com/docs/manual/core/aggregation-pipeline/",
        "doc_id": "www.mongodb.com_docs_manual_core_aggregation_pipeline",
        "category": "databases",
        "chunk_id": "www.mongodb.com_docs_manual_core_aggregation_pipeline_chunk_1",
        "chunk_index": 1
      }
    },
    {
      "content": "you can build expressions from the following components:For example, { $add: [ 3, \"$inventory.total\" ] } is an expression that consists of the $add operator and two operands:The expression returns the result of adding 3 to the value at path inventory.total of the input document.Field path expressions are used to access fields in input documents. To specify a field path, prefix the field name or the dotted field path (if the field is in an embedded document) with a dollar sign $. For example, \"$user\" to specify the field path for the user field or \"$user.name\" to specify the field path to",
      "metadata": {
        "source": "https://www.mongodb.com/docs/manual/core/aggregation-pipeline/",
        "doc_id": "www.mongodb.com_docs_manual_core_aggregation_pipeline",
        "category": "databases",
        "chunk_id": "www.mongodb.com_docs_manual_core_aggregation_pipeline_chunk_2",
        "chunk_index": 2
      }
    },
    {
      "content": "user field or \"$user.name\" to specify the field path to the embedded \"user.name\" field.\"$<field>\" is equivalent to \"$$CURRENT.<field>\" where the CURRENT is a system variable that defaults to the root of the current object, unless stated otherwise in specific stages.For more information and examples, see Field Paths.To run an aggregation pipeline, use:To update documents with an aggregation pipeline, use:Starting in MongoDB 5.0, map-reduce is deprecated:Instead of map-reduce, you should use an aggregation pipeline. Aggregation pipelines provide better performance and usability than map-reduce.You can rewrite map-reduce operations using aggregation pipeline stages, such as $group, $merge, and others.For map-reduce operations that require custom functionality,",
      "metadata": {
        "source": "https://www.mongodb.com/docs/manual/core/aggregation-pipeline/",
        "doc_id": "www.mongodb.com_docs_manual_core_aggregation_pipeline",
        "category": "databases",
        "chunk_id": "www.mongodb.com_docs_manual_core_aggregation_pipeline_chunk_3",
        "chunk_index": 3
      }
    },
    {
      "content": "$group, $merge, and others.For map-reduce operations that require custom functionality, you can use the $accumulator and $function aggregation operators. You can use those operators to define custom aggregation expressions in JavaScript.For examples of aggregation pipeline alternatives to map-reduce, see:To learn more about aggregation pipelines, see:",
      "metadata": {
        "source": "https://www.mongodb.com/docs/manual/core/aggregation-pipeline/",
        "doc_id": "www.mongodb.com_docs_manual_core_aggregation_pipeline",
        "category": "databases",
        "chunk_id": "www.mongodb.com_docs_manual_core_aggregation_pipeline_chunk_4",
        "chunk_index": 4
      }
    }
  ]
}