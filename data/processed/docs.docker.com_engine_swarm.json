{
  "doc_id": "docs.docker.com_engine_swarm",
  "chunks": [
    {
      "content": "Home / Manuals / Docker Engine / Swarm modeSwarm modePage options Copy page as Markdown for LLMs Ask questions with Docs AI ClaudeSwarm mode is an advanced feature for managing a cluster of Docker daemons.Use Swarm mode if you intend to use Swarm as a production runtime environment.If you're not planning on deploying with Swarm, use Docker Compose instead. If you're developing for a Kubernetes deployment, consider using the integrated Kubernetes feature in Docker Desktop.Current versions of Docker include Swarm mode for natively managing a cluster of Docker Engines called a swarm. Use the Docker CLI to create a swarm, deploy application",
      "metadata": {
        "source": "https://docs.docker.com/engine/swarm/",
        "doc_id": "docs.docker.com_engine_swarm",
        "category": "cloud_devops",
        "chunk_id": "docs.docker.com_engine_swarm_chunk_0",
        "chunk_index": 0
      }
    },
    {
      "content": "Use the Docker CLI to create a swarm, deploy application services to a swarm, and manage swarm behavior.Docker Swarm mode is built into the Docker Engine. Do not confuse Docker Swarm mode with Docker Classic Swarm which is no longer actively developed.Use the Docker Engine CLI to create a swarm of Docker Engines where you can deploy application services. You don't need additional orchestration software to create or manage a swarm.Instead of handling differentiation between node roles at deployment time, the Docker Engine handles any specialization at runtime. You can deploy both kinds of nodes, managers and workers, using the Docker Engine.",
      "metadata": {
        "source": "https://docs.docker.com/engine/swarm/",
        "doc_id": "docs.docker.com_engine_swarm",
        "category": "cloud_devops",
        "chunk_id": "docs.docker.com_engine_swarm_chunk_1",
        "chunk_index": 1
      }
    },
    {
      "content": "kinds of nodes, managers and workers, using the Docker Engine. This means you can build an entire swarm from a single disk image.Docker Engine uses a declarative approach to let you define the desired state of the various services in your application stack. For example, you might describe an application comprised of a web front end service with message queueing services and a database backend.For each service, you can declare the number of tasks you want to run. When you scale up or down, the swarm manager automatically adapts by adding or removing tasks to maintain the desired state.The swarm manager node",
      "metadata": {
        "source": "https://docs.docker.com/engine/swarm/",
        "doc_id": "docs.docker.com_engine_swarm",
        "category": "cloud_devops",
        "chunk_id": "docs.docker.com_engine_swarm_chunk_2",
        "chunk_index": 2
      }
    },
    {
      "content": "removing tasks to maintain the desired state.The swarm manager node constantly monitors the cluster state and reconciles any differences between the actual state and your expressed desired state. For example, if you set up a service to run 10 replicas of a container, and a worker machine hosting two of those replicas crashes, the manager creates two new replicas to replace the replicas that crashed. The swarm manager assigns the new replicas to workers that are running and available.You can specify an overlay network for your services. The swarm manager automatically assigns addresses to the containers on the overlay network when it",
      "metadata": {
        "source": "https://docs.docker.com/engine/swarm/",
        "doc_id": "docs.docker.com_engine_swarm",
        "category": "cloud_devops",
        "chunk_id": "docs.docker.com_engine_swarm_chunk_3",
        "chunk_index": 3
      }
    },
    {
      "content": "addresses to the containers on the overlay network when it initializes or updates the application.Swarm manager nodes assign each service in the swarm a unique DNS name and load balance running containers. You can query every container running in the swarm through a DNS server embedded in the swarm.You can expose the ports for services to an external load balancer. Internally, the swarm lets you specify how to distribute service containers between nodes.Each node in the swarm enforces TLS mutual authentication and encryption to secure communications between itself and all other nodes. You have the option to use self-signed root certificates or",
      "metadata": {
        "source": "https://docs.docker.com/engine/swarm/",
        "doc_id": "docs.docker.com_engine_swarm",
        "category": "cloud_devops",
        "chunk_id": "docs.docker.com_engine_swarm_chunk_4",
        "chunk_index": 4
      }
    },
    {
      "content": "You have the option to use self-signed root certificates or certificates from a custom root CA.At rollout time you can apply service updates to nodes incrementally. The swarm manager lets you control the delay between service deployment to different sets of nodes. If anything goes wrong, you can roll back to a previous version of the service.",
      "metadata": {
        "source": "https://docs.docker.com/engine/swarm/",
        "doc_id": "docs.docker.com_engine_swarm",
        "category": "cloud_devops",
        "chunk_id": "docs.docker.com_engine_swarm_chunk_5",
        "chunk_index": 5
      }
    }
  ]
}